definitions:
  constant.RunStatus:
    enum:
    - Scheduling
    - InProgress
    - Failed
    - Succeeded
    - Cancelled
    - Queued
    type: string
    x-enum-varnames:
    - RunStatusScheduling
    - RunStatusInProgress
    - RunStatusFailed
    - RunStatusSucceeded
    - RunStatusCancelled
    - RunStatusQueued
  constant.RunType:
    enum:
    - Generate
    - Preview
    - Apply
    - Destroy
    type: string
    x-enum-varnames:
    - RunTypeGenerate
    - RunTypePreview
    - RunTypeApply
    - RunTypeDestroy
  constant.SourceProviderType:
    enum:
    - git
    - github
    - oci
    - local
    - git
    type: string
    x-enum-varnames:
    - SourceProviderTypeGit
    - SourceProviderTypeGithub
    - SourceProviderTypeOCI
    - SourceProviderTypeLocal
    - DefaultSourceType
  constant.StackState:
    enum:
    - UnSynced
    - Synced
    - OutOfSync
    - Creating
    - Generating
    - GenerateFailed
    - Generated
    - Previewing
    - PreviewFailed
    - Previewed
    - Applying
    - ApplyFailed
    - ApplySucceeded
    - Destroying
    - DestroyFailed
    - DestroySucceeded
    type: string
    x-enum-varnames:
    - StackStateUnSynced
    - StackStateSynced
    - StackStateOutOfSync
    - StackStateCreating
    - StackStateGenerating
    - StackStateGenerateFailed
    - StackStateGenerated
    - StackStatePreviewing
    - StackStatePreviewFailed
    - StackStatePreviewed
    - StackStateApplying
    - StackStateApplyFailed
    - StackStateApplySucceeded
    - StackStateDestroying
    - StackStateDestroyFailed
    - StackStateDestroySucceeded
  entity.Backend:
    properties:
      backendConfig:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.BackendConfig'
        description: |-
          // Type is the type of the backend.
          Type string `yaml:"type" json:"type"`
          Backend is the configuration of the backend.
      creationTimestamp:
        description: CreationTimestamp is the timestamp of the created for the backend.
        type: string
      description:
        description: Description is a human-readable description of the backend.
        type: string
      id:
        description: ID is the id of the backend.
        type: integer
      name:
        description: Name is the name of the backend.
        type: string
      updateTimestamp:
        description: UpdateTimestamp is the timestamp of the updated for the backend.
        type: string
    type: object
  entity.Module:
    properties:
      description:
        description: Description is a human-readable description of the module.
        type: string
      doc:
        allOf:
        - $ref: '#/definitions/url.URL'
        description: Doc is the documentation URL of the module.
      name:
        description: Name is the module name.
        type: string
      owners:
        description: Owners is a list of owners for the module.
        items:
          type: string
        type: array
      url:
        allOf:
        - $ref: '#/definitions/url.URL'
        description: URL is the module oci artifact registry URL.
    type: object
  entity.ModuleWithVersion:
    properties:
      description:
        description: Description is a human-readable description of the module.
        type: string
      doc:
        allOf:
        - $ref: '#/definitions/url.URL'
        description: Doc is the documentation URL of the module.
      name:
        description: Name is the module name.
        type: string
      owners:
        description: Owners is a list of owners for the module.
        items:
          type: string
        type: array
      url:
        allOf:
        - $ref: '#/definitions/url.URL'
        description: URL is the module oci artifact registry URL.
      version:
        description: Version is the module oci artifact version.
        type: string
    type: object
  entity.Organization:
    properties:
      creationTimestamp:
        description: CreationTimestamp is the timestamp of the created for the organization.
        type: string
      description:
        description: Description is a human-readable description of the organization.
        type: string
      displayName:
        description: DisplayName is the human-readable display name.
        type: string
      id:
        description: ID is the id of the organization.
        type: integer
      labels:
        description: Labels are custom labels associated with the organization.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the organization.
        type: string
      owners:
        description: Owners is a list of owners for the organization.
        items:
          type: string
        type: array
      updateTimestamp:
        description: UpdateTimestamp is the timestamp of the updated for the organization.
        type: string
    type: object
  entity.Project:
    properties:
      creationTimestamp:
        description: CreationTimestamp is the timestamp of the created for the project.
        type: string
      description:
        description: Description is a human-readable description of the project.
        type: string
      displayName:
        description: DisplayName is the human-readable display name.
        type: string
      id:
        description: ID is the id of the project.
        type: integer
      labels:
        description: Labels are custom labels associated with the project.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the project.
        type: string
      organization:
        allOf:
        - $ref: '#/definitions/entity.Organization'
        description: Organization is the configuration source associated with the
          project.
      owners:
        description: Owners is a list of owners for the project.
        items:
          type: string
        type: array
      path:
        description: Path is the relative path of the project within the sources.
        type: string
      source:
        allOf:
        - $ref: '#/definitions/entity.Source'
        description: Source is the configuration source associated with the project.
      updateTimestamp:
        description: UpdateTimestamp is the timestamp of the updated for the project.
        type: string
    type: object
  entity.Resource:
    properties:
      LastAppliedRevision:
        description: LastAppliedRevision is the revision of the last sync.
        type: string
      LastAppliedTimestamp:
        description: LastAppliedTimestamp is the timestamp of the last sync.
        type: string
      attributes:
        additionalProperties: true
        description: Attributes is the attributes of the resource.
        type: object
      cloudResourceID:
        description: CloudResourceID is the id of the resource in the cloud.
        type: string
      creationTimestamp:
        description: CreationTimestamp is the timestamp of the created for the resource.
        type: string
      dependsOn:
        description: DependsOn is the depends on of the resource.
        items:
          type: string
        type: array
      extensions:
        additionalProperties: true
        description: Extensions is the extensions of the resource.
        type: object
      iamResourceID:
        description: IAMResourceID is the id of the resource in IAM.
        type: string
      id:
        description: ID is the id of the resource.
        type: integer
      kusionResourceID:
        description: KusionResourceID is the id of the resource in Kusion.
        type: string
      labels:
        description: Labels are custom labels associated with the resource.
        items:
          type: string
        type: array
      owners:
        description: Owners is a list of owners for the resource.
        items:
          type: string
        type: array
      provider:
        description: Provider is the provider of the resource.
        type: string
      resourceName:
        description: ResourceName is the name of the resource.
        type: string
      resourcePlane:
        description: ResourcePlane is the plane of the resource.
        type: string
      resourceType:
        description: ResourceType is the type of the resource.
        type: string
      resourceURN:
        description: ResourceURN is the urn of the resource.
        type: string
      stack:
        allOf:
        - $ref: '#/definitions/entity.Stack'
        description: Stack is the stack associated with the resource.
      status:
        description: Status is the status of the resource.
        type: string
      updateTimestamp:
        description: UpdateTimestamp is the timestamp of the updated for the resource.
        type: string
    type: object
  entity.ResourceGraph:
    properties:
      relations:
        items:
          $ref: '#/definitions/entity.ResourceRelation'
        type: array
      resources:
        additionalProperties:
          $ref: '#/definitions/entity.ResourceInfo'
        type: object
      workload:
        type: string
    type: object
  entity.ResourceInfo:
    properties:
      cloudResourceID:
        description: CloudResourceID is the id of the resource in the cloud.
        type: string
      iamResourceID:
        description: IAMResourceID is the id of the resource in IAM.
        type: string
      resourceName:
        description: ResourceName is the name of the resource.
        type: string
      resourcePlane:
        description: ResourcePlane is the plane of the resource.
        type: string
      resourceType:
        description: ResourceType is the type of the resource.
        type: string
      resourceURN:
        description: ResourceURN is the urn of the resource.
        type: string
      status:
        description: Status is the status of the resource.
        type: string
    type: object
  entity.ResourceRelation:
    properties:
      dependencyResource:
        type: string
      dependentResource:
        type: string
    type: object
  entity.Run:
    properties:
      creationTimestamp:
        description: CreationTimestamp is the timestamp of the created for the run.
        type: string
      id:
        description: ID is the id of the run.
        type: integer
      logs:
        description: Logs is the logs of the run.
        type: string
      result:
        description: Result is the result of the run.
        type: string
      stack:
        allOf:
        - $ref: '#/definitions/entity.Stack'
        description: Stack is the stack of the run.
      status:
        allOf:
        - $ref: '#/definitions/constant.RunStatus'
        description: Status is the status of the run.
      trace:
        description: Trace is the trace of the run.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/constant.RunType'
        description: RunType is the type of the run provider.
      updateTimestamp:
        description: UpdateTimestamp is the timestamp of the updated for the run.
        type: string
      workspace:
        description: Workspace is the target workspace of the run.
        type: string
    type: object
  entity.Source:
    properties:
      creationTimestamp:
        description: CreationTimestamp is the timestamp of the created for the source.
        type: string
      description:
        description: Description is a human-readable description of the source.
        type: string
      id:
        description: ID is the id of the source.
        type: integer
      labels:
        description: Labels are custom labels associated with the source.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the source.
        type: string
      owners:
        description: Owners is a list of owners for the source.
        items:
          type: string
        type: array
      remote:
        allOf:
        - $ref: '#/definitions/url.URL'
        description: Remote is the source URL, including scheme.
      sourceProvider:
        allOf:
        - $ref: '#/definitions/constant.SourceProviderType'
        description: SourceProvider is the type of the source provider.
      updateTimestamp:
        description: UpdateTimestamp is the timestamp of the updated for the source.
        type: string
    type: object
  entity.Stack:
    properties:
      creationTimestamp:
        description: CreationTimestamp is the timestamp of the created for the stack.
        type: string
      description:
        description: Description is a human-readable description of the stack.
        type: string
      desiredVersion:
        description: Desired is the desired version of stack.
        type: string
      displayName:
        description: DisplayName is the human-readable display nams.
        type: string
      id:
        description: ID is the id of the stack.
        type: integer
      labels:
        description: Labels are custom labels associated with the stack.
        items:
          type: string
        type: array
      lastAppliedRevision:
        description: LastAppliedRevision is the spec ID of the last apply operation
          for the stack.
        type: string
      lastAppliedTimestamp:
        description: LastAppliedTimestamp is the timestamp of the last apply operation
          for the stack.
        type: string
      lastGeneratedRevision:
        description: LastGeneratedRevision is the spec ID of the last generate operation
          for the stack.
        type: string
      lastPreviewedRevision:
        description: LastPreviewedRevision is the spec ID of the last preview operation
          for the stack.
        type: string
      name:
        description: Name is the name of the stack.
        type: string
      owners:
        description: Owners is a list of owners for the stack.
        items:
          type: string
        type: array
      path:
        description: Path is the relative path of the stack within the sourcs.
        type: string
      project:
        allOf:
        - $ref: '#/definitions/entity.Project'
        description: Project is the project associated with the stack.
      syncState:
        allOf:
        - $ref: '#/definitions/constant.StackState'
        description: SyncState is the current state of the stack.
      type:
        description: Type is the type of the stack.
        type: string
      updateTimestamp:
        description: UpdateTimestamp is the timestamp of the updated for the stack.
        type: string
    type: object
  entity.Workspace:
    properties:
      backend:
        allOf:
        - $ref: '#/definitions/entity.Backend'
        description: Backend is the corresponding backend for this workspace.
      creationTimestamp:
        description: CreationTimestamp is the timestamp of the created for the workspace.
        type: string
      description:
        description: Description is a human-readable description of the workspace.
        type: string
      displayName:
        description: DisplayName is the human-readable display name.
        type: string
      id:
        description: ID is the id of the workspace.
        type: integer
      labels:
        description: Labels are custom labels associated with the workspace.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the workspace.
        type: string
      owners:
        description: Owners is a list of owners for the workspace.
        items:
          type: string
        type: array
      updateTimestamp:
        description: UpdateTimestamp is the timestamp of the updated for the workspace.
        type: string
    type: object
  handler.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
  handler.Response:
    properties:
      costTime:
        allOf:
        - $ref: '#/definitions/handler.Duration'
        description: Time taken for the request.
      data:
        description: Data payload.
      endTime:
        description: Request end time.
        type: string
      message:
        description: Descriptive message.
        type: string
      startTime:
        description: Request start time.
        type: string
      success:
        description: Indicates success status.
        type: boolean
      traceID:
        description: Trace identifier.
        type: string
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AWSProvider:
    properties:
      profile:
        description: |-
          The profile to be used to interact with AWS Secrets Manager.
          If not set, the default profile created with `aws configure` will be used.
        type: string
      region:
        description: |-
          AWS Region to be used to interact with AWS Secrets Manager.
          Examples are us-east-1, us-west-2, etc.
        type: string
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AlicloudProvider:
    properties:
      region:
        description: |-
          Alicloud Region to be used to interact with Alicloud Secrets Manager.
          Examples are cn-beijing, cn-shanghai, etc.
        type: string
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AzureEnvironmentType:
    enum:
    - PublicCloud
    - USGovernmentCloud
    - ChinaCloud
    - GermanCloud
    type: string
    x-enum-varnames:
    - AzureEnvironmentPublicCloud
    - AzureEnvironmentUSGovernmentCloud
    - AzureEnvironmentChinaCloud
    - AzureEnvironmentGermanCloud
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AzureKVProvider:
    properties:
      environmentType:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AzureEnvironmentType'
        description: |-
          EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure.
          By-default it points to the public cloud AAD endpoint, and the following endpoints are available:
          PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
          Ref: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
      tenantId:
        description: TenantID configures the Azure Tenant to send requests to.
        type: string
      vaultUrl:
        description: Vault Url from which the secrets to be fetched from.
        type: string
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.BackendConfig:
    properties:
      configs:
        additionalProperties: {}
        description: Configs contains config items of the backend, whose keys differ
          from different backend types.
        type: object
      type:
        description: Type is the backend type, supports BackendTypeLocal, BackendTypeOss,
          BackendTypeS3.
        type: string
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Configs:
    properties:
      default:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.GenericConfig'
        description: Default is default block of the module config.
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.FakeProvider:
    properties:
      data:
        items:
          $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.FakeProviderData'
        type: array
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.FakeProviderData:
    properties:
      key:
        type: string
      value:
        type: string
      valueMap:
        additionalProperties:
          type: string
        type: object
      version:
        type: string
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.GenericConfig:
    additionalProperties: {}
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModuleConfig:
    properties:
      configs:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Configs'
        description: Configs contains all levels of module configs
      path:
        description: Path is the path of the module. It can be a local path or a remote
          URL
        type: string
      version:
        description: Version is the version of the module.
        type: string
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModuleConfigs:
    additionalProperties:
      $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModuleConfig'
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModulePatcherConfig:
    properties:
      projectSelector:
        description: ProjectSelector contains the selected projects.
        items:
          type: string
        type: array
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.OnPremisesProvider:
    properties:
      attributes:
        additionalProperties:
          type: string
        description: attributes of the provider
        type: object
      name:
        description: platform name of the provider
        type: string
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ProviderSpec:
    properties:
      alicloud:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AlicloudProvider'
        description: Alicloud configures a store to retrieve secrets from Alicloud
          Secrets Manager.
      aws:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AWSProvider'
        description: AWS configures a store to retrieve secrets from AWS Secrets Manager.
      azure:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AzureKVProvider'
        description: Azure configures a store to retrieve secrets from Azure KeyVault.
      fake:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.FakeProvider'
        description: Fake configures a store with static key/value pairs
      onpremises:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.OnPremisesProvider'
        description: Onprem configures a store in on-premises environments
      vault:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.VaultProvider'
        description: Vault configures a store to retrieve secrets from HashiCorp Vault.
      viettelcloud:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ViettelCloudProvider'
        description: ViettelCloud configures a store to retrieve secrets from ViettelCloud
          Secrets Manager.
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Resource:
    properties:
      attributes:
        additionalProperties: true
        description: Attributes represents all specified attributes of this resource
        type: object
      dependsOn:
        description: DependsOn contains all resources this resource depends on
        items:
          type: string
        type: array
      extensions:
        additionalProperties: true
        description: Extensions specifies arbitrary metadata of this resource
        type: object
      id:
        description: |-
          ID is the unique key of this resource.
          ApiVersion:Kind:Namespace:Name is an idiomatic way for Kubernetes resources.
          providerNamespace:providerName:resourceType:resourceName for Terraform resources
        type: string
      type:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Type'
        description: Type represents all Context we supported like Kubernetes and
          Terraform
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.SecretStore:
    properties:
      provider:
        $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ProviderSpec'
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Spec:
    properties:
      context:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.GenericConfig'
        description: Context contains workspace-level configurations, such as runtimes,
          topologies, and metadata, etc.
      resources:
        description: Resources is the list of Resource this Spec contains.
        items:
          $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Resource'
        type: array
      secretStore:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.SecretStore'
        description: SecretSore represents a external secret store location for storing
          secrets.
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Type:
    enum:
    - Kubernetes
    - Terraform
    type: string
    x-enum-varnames:
    - Kubernetes
    - Terraform
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.VaultKVStoreVersion:
    enum:
    - v1
    - v2
    type: string
    x-enum-varnames:
    - VaultKVStoreV1
    - VaultKVStoreV2
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.VaultProvider:
    properties:
      path:
        description: 'Path is the mount path of the Vault KV backend endpoint, e.g:
          "secret".'
        type: string
      server:
        description: 'Server is the target Vault server address to connect, e.g: "https://vault.example.com:8200".'
        type: string
      version:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.VaultKVStoreVersion'
        description: |-
          Version is the Vault KV secret engine version. Version can be either "v1" or
          "v2", defaults to "v2".
    type: object
  kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ViettelCloudProvider:
    properties:
      cmpURL:
        description: |-
          ViettelCloud CMP URL to be used to interact with ViettelCloud Secrets Manager.
          Examples are https://console.viettelcloud.vn/api/
        type: string
      projectID:
        description: ProjectID to be used to interact with ViettelCloud Secrets Manager.
        type: string
    type: object
  models.ActionType:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-comments:
      Create: creating a new resource.
      Delete: deleting an existing resource.
      UnChanged: nothing to do.
      Undefined: invalidate value
      Update: updating an existing resource.
    x-enum-varnames:
    - Undefined
    - UnChanged
    - Create
    - Update
    - Delete
  models.ChangeStep:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/models.ActionType'
        description: the operation performed by this step
      from:
        description: old data
      id:
        description: the resource id
        type: string
      to:
        description: new data
    type: object
  models.Changes:
    properties:
      changeSteps:
        additionalProperties:
          $ref: '#/definitions/models.ChangeStep'
        type: object
      stepKeys:
        items:
          type: string
        type: array
    type: object
  request.CreateBackendRequest:
    properties:
      backendConfig:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.BackendConfig'
        description: BackendConfig is the configuration of the backend.
      description:
        description: Description is a human-readable description of the backend.
        type: string
      name:
        description: Name is the name of the backend.
        type: string
    required:
    - backendConfig
    - name
    type: object
  request.CreateModuleRequest:
    properties:
      description:
        description: Description is a human-readable description of the module.
        type: string
      doc:
        description: Doc is the documentation URL of the module.
        type: string
      name:
        description: Name is the module name.
        type: string
      owners:
        description: Owners is a list of owners for the module.
        items:
          type: string
        type: array
      url:
        description: URL is the module oci artifact registry URL.
        type: string
    required:
    - name
    - url
    type: object
  request.CreateOrganizationRequest:
    properties:
      description:
        description: Description is a human-readable description of the organization.
        type: string
      labels:
        description: Labels are custom labels associated with the organization.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the organization.
        type: string
      owners:
        description: Owners is a list of owners for the organization.
        items:
          type: string
        type: array
    required:
    - name
    - owners
    type: object
  request.CreateProjectRequest:
    properties:
      description:
        description: Description is a human-readable description of the project.
        type: string
      domain:
        description: Domain is the domain of the project, typically serving as the
          parent folder name for the project.
        type: string
      labels:
        description: Labels are custom labels associated with the project.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the project.
        type: string
      organizationID:
        description: OrganizationID is the organization id associated with the project.
        type: integer
      owners:
        description: Owners is a list of owners for the project.
        items:
          type: string
        type: array
      path:
        description: Path is the relative path of the project within the sources.
        type: string
      sourceID:
        description: SourceID is the configuration source id associated with the project.
        type: integer
    required:
    - name
    - path
    type: object
  request.CreateSourceRequest:
    properties:
      description:
        description: Description is a human-readable description of the source.
        type: string
      labels:
        description: Labels are custom labels associated with the source.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the source.
        type: string
      owners:
        description: Owners is a list of owners for the source.
        items:
          type: string
        type: array
      remote:
        description: Remote is the source URL, including scheme.
        type: string
      sourceProvider:
        description: SourceProvider is the type of the source provider.
        type: string
    required:
    - name
    - remote
    - sourceProvider
    type: object
  request.CreateStackRequest:
    properties:
      description:
        description: Description is a human-readable description of the stack.
        type: string
      desiredVersion:
        description: DesiredVersion is the desired revision of stack.
        type: string
      labels:
        description: Labels are custom labels associated with the stack.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the stack.
        type: string
      owners:
        description: Owners is a list of owners for the stack.
        items:
          type: string
        type: array
      path:
        description: Path is the relative path of the stack within the source.
        type: string
      projectID:
        description: ProjectID is the project id of the stack within the source.
        type: integer
      projectName:
        description: ProjectName is the project name of the stack within the source.
        type: string
      type:
        description: Type is the type of the stack.
        type: string
    required:
    - name
    type: object
  request.CreateWorkspaceRequest:
    properties:
      backendID:
        description: BackendID is the configuration backend id associated with the
          workspace.
        type: integer
      description:
        description: Description is a human-readable description of the workspace.
        type: string
      labels:
        description: Labels are custom labels associated with the workspace.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the workspace.
        type: string
      owners:
        description: Owners is a list of owners for the workspace.
        items:
          type: string
        type: array
    required:
    - backendID
    - name
    - owners
    type: object
  request.StackImportRequest:
    properties:
      importedResources:
        additionalProperties:
          type: string
        type: object
    type: object
  request.UpdateBackendRequest:
    properties:
      backendConfig:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.BackendConfig'
        description: BackendConfig is the configuration of the backend.
      description:
        description: Description is a human-readable description of the backend.
        type: string
      id:
        description: ID is the id of the backend.
        type: integer
      name:
        description: Name is the name of the backend.
        type: string
    required:
    - id
    type: object
  request.UpdateModuleRequest:
    properties:
      description:
        description: Description is a human-readable description of the module.
        type: string
      doc:
        description: Doc is the documentation URL of the module.
        type: string
      name:
        description: Name is the module name.
        type: string
      owners:
        description: Owners is a list of owners for the module.
        items:
          type: string
        type: array
      url:
        description: URL is the module oci artifact registry URL.
        type: string
    required:
    - name
    type: object
  request.UpdateOrganizationRequest:
    properties:
      description:
        description: Description is a human-readable description of the organization.
        type: string
      id:
        description: ID is the id of the organization.
        type: integer
      labels:
        description: Labels are custom labels associated with the organization.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the organization.
        type: string
      owners:
        description: Owners is a list of owners for the organization.
        items:
          type: string
        type: array
    required:
    - id
    type: object
  request.UpdateProjectRequest:
    properties:
      description:
        description: Description is a human-readable description of the project.
        type: string
      domain:
        description: Domain is the domain of the project, typically serving as the
          parent folder name for the project.
        type: string
      id:
        description: ID is the id of the project.
        type: integer
      labels:
        description: Labels are custom labels associated with the project.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the project.
        type: string
      organizationID:
        description: OrganizationID is the organization id associated with the project.
        type: integer
      owners:
        description: Owners is a list of owners for the project.
        items:
          type: string
        type: array
      path:
        description: Path is the relative path of the project within the sources.
        type: string
      sourceID:
        description: SourceID is the configuration source id associated with the project.
        type: integer
    required:
    - id
    type: object
  request.UpdateSourceRequest:
    properties:
      description:
        description: Description is a human-readable description of the source.
        type: string
      id:
        description: ID is the id of the source.
        type: integer
      labels:
        description: Labels are custom labels associated with the source.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the source.
        type: string
      owners:
        description: Owners is a list of owners for the source.
        items:
          type: string
        type: array
      remote:
        description: Remote is the source URL, including scheme.
        type: string
      sourceProvider:
        description: SourceProvider is the type of the source provider.
        type: string
    required:
    - id
    type: object
  request.UpdateStackRequest:
    properties:
      description:
        description: Description is a human-readable description of the stack.
        type: string
      desiredVersion:
        description: DesiredVersion is the desired revision of stack.
        type: string
      id:
        description: ID is the id of the stack.
        type: integer
      labels:
        description: Labels are custom labels associated with the stack.
        items:
          type: string
        type: array
      name:
        description: Name is the name of the stack.
        type: string
      owners:
        description: Owners is a list of owners for the stack.
        items:
          type: string
        type: array
      path:
        description: Path is the relative path of the stack within the source.
        type: string
      projectID:
        description: ProjectID is the project id of the stack within the source.
        type: integer
      projectName:
        description: ProjectName is the project name of the stack within the source.
        type: string
      type:
        description: Type is the type of the stack.
        type: string
    required:
    - id
    type: object
  request.UpdateWorkspaceRequest:
    properties:
      description:
        description: Description is a human-readable description of the workspace.
        type: string
      id:
        description: ID is the id of the workspace.
        type: integer
      labels:
        additionalProperties:
          type: string
        description: Labels are custom labels associated with the workspace.
        type: object
      name:
        description: Name is the name of the workspace.
        type: string
      owners:
        description: Owners is a list of owners for the workspace.
        items:
          type: string
        type: array
    required:
    - id
    type: object
  request.WorkspaceConfigs:
    properties:
      context:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.GenericConfig'
        description: Context contains workspace-level configurations, such as runtimes,
          topologies, and metadata, etc.
      modules:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModuleConfigs'
        description: Modules are the configs of a set of modules.
      secretStore:
        allOf:
        - $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.SecretStore'
        description: SecretStore represents a secure external location for storing
          secrets.
    type: object
  response.PaginatedBackendResponse:
    properties:
      backends:
        items:
          $ref: '#/definitions/entity.Backend'
        type: array
      currentPage:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  response.PaginatedModuleResponse:
    properties:
      currentPage:
        type: integer
      modules:
        items:
          $ref: '#/definitions/entity.Module'
        type: array
      modulesWithVersion:
        items:
          $ref: '#/definitions/entity.ModuleWithVersion'
        type: array
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  response.PaginatedOrganizationResponse:
    properties:
      currentPage:
        type: integer
      organizations:
        items:
          $ref: '#/definitions/entity.Organization'
        type: array
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  response.PaginatedProjectResponse:
    properties:
      currentPage:
        type: integer
      pageSize:
        type: integer
      projects:
        items:
          $ref: '#/definitions/entity.Project'
        type: array
      total:
        type: integer
    type: object
  response.PaginatedResourceResponse:
    properties:
      currentPage:
        type: integer
      pageSize:
        type: integer
      resources:
        items:
          $ref: '#/definitions/entity.Resource'
        type: array
      total:
        type: integer
    type: object
  response.PaginatedRunResponse:
    properties:
      currentPage:
        type: integer
      pageSize:
        type: integer
      runs:
        items:
          $ref: '#/definitions/entity.Run'
        type: array
      total:
        type: integer
    type: object
  response.PaginatedSourceResponse:
    properties:
      currentPage:
        type: integer
      pageSize:
        type: integer
      sources:
        items:
          $ref: '#/definitions/entity.Source'
        type: array
      total:
        type: integer
    type: object
  response.PaginatedStackResponse:
    properties:
      currentPage:
        type: integer
      pageSize:
        type: integer
      stacks:
        items:
          $ref: '#/definitions/entity.Stack'
        type: array
      total:
        type: integer
    type: object
  response.PaginatedWorkspaceResponse:
    properties:
      currentPage:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
      workspaces:
        items:
          $ref: '#/definitions/entity.Workspace'
        type: array
    type: object
  url.URL:
    properties:
      forceQuery:
        description: append a query ('?') even if RawQuery is empty
        type: boolean
      fragment:
        description: fragment for references, without '#'
        type: string
      host:
        description: host or host:port (see Hostname and Port methods)
        type: string
      omitHost:
        description: do not emit empty host (authority)
        type: boolean
      opaque:
        description: encoded opaque data
        type: string
      path:
        description: path (relative paths may omit leading slash)
        type: string
      rawFragment:
        description: encoded fragment hint (see EscapedFragment method)
        type: string
      rawPath:
        description: encoded path hint (see EscapedPath method)
        type: string
      rawQuery:
        description: encoded query values, without '?'
        type: string
      scheme:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/url.Userinfo'
        description: username and password information
    type: object
  url.Userinfo:
    type: object
info:
  contact: {}
paths:
  /api/v1/backends:
    get:
      description: List all backends
      operationId: listBackend
      parameters:
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.PaginatedBackendResponse'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List backends
      tags:
      - backend
    post:
      consumes:
      - application/json
      description: Create a new backend
      operationId: createBackend
      parameters:
      - description: Created backend
        in: body
        name: backend
        required: true
        schema:
          $ref: '#/definitions/request.CreateBackendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Backend'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create backend
      tags:
      - backend
  /api/v1/backends/{backendID}:
    delete:
      description: Delete specified backend by ID
      operationId: deleteBackend
      parameters:
      - description: Backend ID
        in: path
        name: backendID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete backend
      tags:
      - backend
    get:
      description: Get backend information by backend ID
      operationId: getBackend
      parameters:
      - description: Backend ID
        in: path
        name: backendID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Backend'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get backend
      tags:
      - backend
    put:
      consumes:
      - application/json
      description: Update the specified backend
      operationId: updateBackend
      parameters:
      - description: Backend ID
        in: path
        name: backendID
        required: true
        type: integer
      - description: Updated backend
        in: body
        name: backend
        required: true
        schema:
          $ref: '#/definitions/request.UpdateBackendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Backend'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update backend
      tags:
      - backend
  /api/v1/modules:
    get:
      description: List module information
      operationId: listModule
      parameters:
      - description: Workspace ID to filter module list by. Default to all workspaces.
        in: query
        name: workspaceID
        type: integer
      - description: Module name to filter module list by. Default to all modules.
        in: query
        name: moduleName
        type: string
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.PaginatedModuleResponse'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List module
      tags:
      - module
    post:
      consumes:
      - application/json
      description: Create a new Kusion module
      operationId: createModule
      parameters:
      - description: Created module
        in: body
        name: module
        required: true
        schema:
          $ref: '#/definitions/request.CreateModuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Module'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create module
      tags:
      - module
  /api/v1/modules/{moduleName}:
    delete:
      description: Delete the specified module by name
      operationId: deleteModule
      parameters:
      - description: Module Name
        in: path
        name: moduleName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete module
      tags:
      - module
    get:
      description: Get module information by module name
      operationId: getModule
      parameters:
      - description: Module Name
        in: path
        name: moduleName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Module'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get module
      tags:
      - module
    put:
      consumes:
      - application/json
      description: Update the specified module
      operationId: updateModule
      parameters:
      - description: Module Name
        in: path
        name: moduleName
        required: true
        type: string
      - description: Updated module
        in: body
        name: module
        required: true
        schema:
          $ref: '#/definitions/request.UpdateModuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Module'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update module
      tags:
      - module
  /api/v1/orgs:
    get:
      description: List all organizations
      operationId: listOrganization
      parameters:
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.PaginatedOrganizationResponse'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List organizations
      tags:
      - organization
    post:
      consumes:
      - application/json
      description: Create a new organization
      operationId: createOrganization
      parameters:
      - description: Created organization
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/request.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Organization'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create organization
      tags:
      - organization
  /api/v1/orgs/{orgID}:
    delete:
      description: Delete specified organization by ID
      operationId: deleteOrganization
      parameters:
      - description: Organization ID
        in: path
        name: orgID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete organization
      tags:
      - organization
    get:
      description: Get organization information by organization ID
      operationId: getOrganization
      parameters:
      - description: Organization ID
        in: path
        name: orgID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Organization'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get organization
      tags:
      - organization
    put:
      consumes:
      - application/json
      description: Update the specified organization
      operationId: updateOrganization
      parameters:
      - description: Organization ID
        in: path
        name: orgID
        required: true
        type: integer
      - description: Updated organization
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Organization'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update organization
      tags:
      - organization
  /api/v1/projects:
    get:
      description: List all or a subset of the projects
      operationId: listProject
      parameters:
      - description: OrganizationID to filter project list by. Default to all projects.
        in: query
        name: orgID
        type: integer
      - description: Project name to filter project list by. This should only return
          one result if set.
        in: query
        name: name
        type: string
      - description: Fuzzy match project name to filter project list by.
        in: query
        name: fuzzyName
        type: string
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.PaginatedProjectResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List projects
      tags:
      - project
    post:
      consumes:
      - application/json
      description: Create a new project
      operationId: createProject
      parameters:
      - description: Created project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/request.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Project'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create project
      tags:
      - project
  /api/v1/projects/{projectID}:
    delete:
      description: Delete specified project by ID
      operationId: deleteProject
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete project
      tags:
      - project
    get:
      description: Get project information by project ID
      operationId: getProject
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Project'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get project
      tags:
      - project
    put:
      consumes:
      - application/json
      description: Update the specified project
      operationId: updateProject
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer
      - description: Updated project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Project'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update project
      tags:
      - project
  /api/v1/resources:
    get:
      description: List resource information
      operationId: listResource
      parameters:
      - description: The organization ID
        in: query
        name: orgID
        type: integer
      - description: The project ID
        in: query
        name: projectID
        type: integer
      - description: The stack ID
        in: query
        name: stackID
        type: integer
      - description: The resource type
        in: query
        name: resourceType
        type: string
      - description: The resource plane
        in: query
        name: resourcePlane
        type: string
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.PaginatedResourceResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List resource
      tags:
      - resource
  /api/v1/resources/{resourceID}:
    get:
      description: Get resource information by resource ID
      operationId: getResource
      parameters:
      - description: Resource ID
        in: path
        name: resourceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Resource'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get resource
      tags:
      - resource
  /api/v1/resources/graph:
    get:
      description: Get resource graph by stack ID
      operationId: getResourceGraph
      parameters:
      - description: Stack ID
        in: query
        name: stackID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.ResourceGraph'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get resource graph
      tags:
      - resource
  /api/v1/runs:
    get:
      description: List all runs
      operationId: listRun
      parameters:
      - description: ProjectID to filter runs by. Default to all
        in: query
        name: projectID
        type: integer
      - collectionFormat: csv
        description: RunType to filter runs by. Default to all
        in: query
        items:
          type: string
        name: type
        type: array
      - collectionFormat: csv
        description: RunStatus to filter runs by. Default to all
        in: query
        items:
          type: string
        name: status
        type: array
      - description: StackID to filter runs by. Default to all
        in: query
        name: stackID
        type: integer
      - description: Workspace to filter runs by. Default to all
        in: query
        name: workspace
        type: string
      - description: 'StartTime to filter runs by. Default to all. Format: RFC3339'
        in: query
        name: startTime
        type: string
      - description: 'EndTime to filter runs by. Default to all. Format: RFC3339'
        in: query
        name: endTime
        type: string
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.PaginatedRunResponse'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List runs
      tags:
      - stack
  /api/v1/runs/{runID}:
    get:
      description: Get run information by run ID
      operationId: getRun
      parameters:
      - description: Run ID
        in: path
        name: runID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Run'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get run
      tags:
      - run
  /api/v1/runs/{runID}/result:
    get:
      description: Get run result by run ID
      operationId: getRunResult
      parameters:
      - description: Run ID
        in: path
        name: runID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get run result
      tags:
      - run
  /api/v1/sources:
    get:
      description: List source information by source ID
      operationId: listSource
      parameters:
      - description: Source name to filter source list by. Default to all sources.
        in: query
        name: sourceName
        type: string
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.PaginatedSourceResponse'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List source
      tags:
      - source
    post:
      consumes:
      - application/json
      description: Create a new source
      operationId: createSource
      parameters:
      - description: Created source
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/request.CreateSourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Source'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create source
      tags:
      - source
  /api/v1/sources/{sourceID}:
    delete:
      description: Delete specified source by ID
      operationId: deleteSource
      parameters:
      - description: Source ID
        in: path
        name: sourceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete source
      tags:
      - source
    get:
      description: Get source information by source ID
      operationId: getSource
      parameters:
      - description: Source ID
        in: path
        name: sourceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Source'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get source
      tags:
      - source
    put:
      consumes:
      - application/json
      description: Update the specified source
      operationId: updateSource
      parameters:
      - description: Source ID
        in: path
        name: sourceID
        required: true
        type: integer
      - description: Updated source
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/request.UpdateSourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Source'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update source
      tags:
      - source
  /api/v1/stacks:
    get:
      description: List all stacks
      operationId: listStack
      parameters:
      - description: ProjectID to filter stacks by. Default to all
        in: query
        name: projectID
        type: integer
      - description: OrgID to filter stacks by. Default to all
        in: query
        name: orgID
        type: integer
      - description: ProjectName to filter stacks by. Default to all
        in: query
        name: projectName
        type: string
      - description: Path to filter stacks by. Default to all
        in: query
        name: path
        type: string
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.PaginatedStackResponse'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List stacks
      tags:
      - stack
    post:
      consumes:
      - application/json
      description: Create a new stack
      operationId: createStack
      parameters:
      - description: Created stack
        in: body
        name: stack
        required: true
        schema:
          $ref: '#/definitions/request.CreateStackRequest'
      - description: Whether to create an AppConfig from template when creating the
          stack
        in: query
        name: fromTemplate
        type: boolean
      - description: Whether to initialize an AppTopology from template when creating
          the stack
        in: query
        name: initTopology
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Stack'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create stack
      tags:
      - stack
  /api/v1/stacks/{stackID}:
    delete:
      description: Delete specified stack by ID
      operationId: deleteStack
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete stack
      tags:
      - stack
    get:
      description: Get stack information by stack ID
      operationId: getStack
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Stack'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get stack
      tags:
      - stack
    put:
      consumes:
      - application/json
      description: Update the specified stack
      operationId: updateStack
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: Updated stack
        in: body
        name: stack
        required: true
        schema:
          $ref: '#/definitions/request.UpdateStackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Stack'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update stack
      tags:
      - stack
  /api/v1/stacks/{stackID}/apply:
    post:
      description: Apply stack information by stack ID
      operationId: applyStack
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: The resources to import during the stack preview
        in: body
        name: importedResources
        schema:
          $ref: '#/definitions/request.StackImportRequest'
      - description: The target workspace to preview the spec in.
        in: query
        name: workspace
        required: true
        type: string
      - description: Import existing resources during the stack preview
        in: query
        name: importResources
        type: boolean
      - description: The Spec ID to use for the apply. Will generate a new spec if
          omitted.
        in: query
        name: specID
        type: string
      - description: Force the apply even when the stack is locked. May cause concurrency
          issues!!!
        in: query
        name: force
        type: boolean
      - description: Apply in dry-run mode
        in: query
        name: dryrun
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Apply stack
      tags:
      - stack
  /api/v1/stacks/{stackID}/apply/async:
    post:
      description: Start a run and asynchronously apply stack changes by stack ID
      operationId: applyStackAsync
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: The resources to import during the stack preview
        in: body
        name: importedResources
        schema:
          $ref: '#/definitions/request.StackImportRequest'
      - description: The target workspace to preview the spec in.
        in: query
        name: workspace
        required: true
        type: string
      - description: Import existing resources during the stack preview
        in: query
        name: importResources
        type: boolean
      - description: The Spec ID to use for the apply. Will generate a new spec if
          omitted.
        in: query
        name: specID
        type: string
      - description: Force the apply even when the stack is locked. May cause concurrency
          issues!!!
        in: query
        name: force
        type: boolean
      - description: Apply in dry-run mode
        in: query
        name: dryrun
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Run'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Asynchronously apply stack
      tags:
      - stack
  /api/v1/stacks/{stackID}/destroy:
    post:
      description: Destroy stack information by stack ID
      operationId: destroyStack
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: The target workspace to preview the spec in.
        in: query
        name: workspace
        required: true
        type: string
      - description: Force the destroy even when the stack is locked. May cause concurrency
          issues!!!
        in: query
        name: force
        type: boolean
      - description: Destroy in dry-run mode
        in: query
        name: dryrun
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Destroy stack
      tags:
      - stack
  /api/v1/stacks/{stackID}/destroy/async:
    post:
      description: Start a run and asynchronously destroy stack resources by stack
        ID
      operationId: destroyStackAsync
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: The target workspace to preview the spec in.
        in: query
        name: workspace
        required: true
        type: string
      - description: Force the destroy even when the stack is locked. May cause concurrency
          issues!!!
        in: query
        name: force
        type: boolean
      - description: Destroy in dry-run mode
        in: query
        name: dryrun
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Run'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Asynchronously destroy stack
      tags:
      - stack
  /api/v1/stacks/{stackID}/generate:
    post:
      description: Generate stack information by stack ID
      operationId: generateStack
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: The target workspace to preview the spec in.
        in: query
        name: workspace
        required: true
        type: string
      - description: 'The format to generate the spec in. Choices are: spec. Default
          to spec.'
        in: query
        name: format
        type: string
      - description: Force the generate even when the stack is locked
        in: query
        name: force
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Spec'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Generate stack
      tags:
      - stack
  /api/v1/stacks/{stackID}/generate/async:
    post:
      description: Start a run and asynchronously generate stack spec by stack ID
      operationId: generateStackAsync
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: The target workspace to preview the spec in.
        in: query
        name: workspace
        required: true
        type: string
      - description: 'The format to generate the spec in. Choices are: spec. Default
          to spec.'
        in: query
        name: format
        type: string
      - description: Force the generate even when the stack is locked
        in: query
        name: force
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Run'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Asynchronously generate stack
      tags:
      - stack
  /api/v1/stacks/{stackID}/preview:
    post:
      description: Preview stack information by stack ID
      operationId: previewStack
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: The resources to import during the stack preview
        in: body
        name: importedResources
        schema:
          $ref: '#/definitions/request.StackImportRequest'
      - description: The target workspace to preview the spec in.
        in: query
        name: workspace
        required: true
        type: string
      - description: Import existing resources during the stack preview
        in: query
        name: importResources
        type: boolean
      - description: 'Output format. Choices are: json, default. Default to default
          output format in Kusion.'
        in: query
        name: output
        type: string
      - description: Show detailed output
        in: query
        name: detail
        type: boolean
      - description: The Spec ID to use for the preview. Default to the last one generated.
        in: query
        name: specID
        type: string
      - description: Force the preview even when the stack is locked
        in: query
        name: force
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Changes'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Preview stack
      tags:
      - stack
  /api/v1/stacks/{stackID}/preview/async:
    post:
      description: Start a run and asynchronously preview stack changes by stack ID
      operationId: previewStackAsync
      parameters:
      - description: Stack ID
        in: path
        name: stackID
        required: true
        type: integer
      - description: The resources to import during the stack preview
        in: body
        name: importedResources
        schema:
          $ref: '#/definitions/request.StackImportRequest'
      - description: The target workspace to preview the spec in.
        in: query
        name: workspace
        required: true
        type: string
      - description: Import existing resources during the stack preview
        in: query
        name: importResources
        type: boolean
      - description: 'Output format. Choices are: json, default. Default to default
          output format in Kusion.'
        in: query
        name: output
        type: string
      - description: Show detailed output
        in: query
        name: detail
        type: boolean
      - description: The Spec ID to use for the preview. Default to the last one generated.
        in: query
        name: specID
        type: string
      - description: Force the preview even when the stack is locked
        in: query
        name: force
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Run'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Asynchronously preview stack
      tags:
      - stack
  /api/v1/workspaces:
    get:
      description: List all workspaces
      operationId: listWorkspace
      parameters:
      - description: BackendID to filter workspaces by. Default to all
        in: query
        name: backendID
        type: integer
      - description: The current page to fetch. Default to 1
        in: query
        name: page
        type: integer
      - description: The size of the page. Default to 10
        in: query
        name: pageSize
        type: integer
      - description: Which field to sort the list by. Default to id
        in: query
        name: sortBy
        type: string
      - description: Whether to sort the list in ascending order. Default to false
        in: query
        name: ascending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.PaginatedWorkspaceResponse'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List workspaces
      tags:
      - workspace
    post:
      consumes:
      - application/json
      description: Create a new workspace
      operationId: createWorkspace
      parameters:
      - description: Created workspace
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/request.CreateWorkspaceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Workspace'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create workspace
      tags:
      - workspace
  /api/v1/workspaces/{workspaceID}:
    delete:
      description: Delete specified workspace by ID
      operationId: deleteWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete workspace
      tags:
      - workspace
    get:
      description: Get workspace information by workspace ID
      operationId: getWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Workspace'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get workspace
      tags:
      - workspace
    put:
      consumes:
      - application/json
      description: Update the specified workspace
      operationId: updateWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceID
        required: true
        type: integer
      - description: Updated workspace
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/request.UpdateWorkspaceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Workspace'
              type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update workspace
      tags:
      - workspace
  /api/v1/workspaces/{workspaceID}/configs:
    get:
      consumes:
      - application/json
      description: Get configurations in the specified workspace
      operationId: getWorkspaceConfigs
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/request.WorkspaceConfigs'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: get workspace configurations
      tags:
      - workspace
    put:
      consumes:
      - application/json
      description: Update the configurations in the specified workspace
      operationId: updateWorkspaceConfigs
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceID
        required: true
        type: integer
      - description: Updated workspace configurations
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/request.WorkspaceConfigs'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/request.WorkspaceConfigs'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update workspace configurations
      tags:
      - workspace
  /api/v1/workspaces/{workspaceID}/configs/mod-deps:
    post:
      consumes:
      - application/json
      description: Create the module dependencies in kcl.mod of the specified workspace
      operationId: createWorkspaceModDeps
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceID
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create the module dependencies of the workspace
      tags:
      - workspace
  /api/v1/workspaces/configs/validate:
    post:
      consumes:
      - application/json
      description: Validate the configurations in the specified workspace
      operationId: validateWorkspaceConfigs
      parameters:
      - description: Workspace configurations to be validated
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/request.WorkspaceConfigs'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/request.WorkspaceConfigs'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "429":
          description: Too Many Requests
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Validate workspace configurations
      tags:
      - workspace
  /endpoints:
    get:
      consumes:
      - text/plain
      description: List all registered endpoints in the router
      produces:
      - text/plain
      responses:
        "200":
          description: Endpoints listed successfully
          schema:
            type: string
      summary: List all available endpoints
      tags:
      - debug
swagger: "2.0"
