// Package openapispec Code generated by swaggo/swag. DO NOT EDIT
package openapispec

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/backends": {
            "get": {
                "description": "List all backends",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backend"
                ],
                "summary": "List backends",
                "operationId": "listBackend",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.PaginatedBackendResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new backend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backend"
                ],
                "summary": "Create backend",
                "operationId": "createBackend",
                "parameters": [
                    {
                        "description": "Created backend",
                        "name": "backend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateBackendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Backend"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/backends/{backendID}": {
            "get": {
                "description": "Get backend information by backend ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backend"
                ],
                "summary": "Get backend",
                "operationId": "getBackend",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backend ID",
                        "name": "backendID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Backend"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update the specified backend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backend"
                ],
                "summary": "Update backend",
                "operationId": "updateBackend",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backend ID",
                        "name": "backendID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated backend",
                        "name": "backend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateBackendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Backend"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete specified backend by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backend"
                ],
                "summary": "Delete backend",
                "operationId": "deleteBackend",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backend ID",
                        "name": "backendID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/modules": {
            "get": {
                "description": "List module information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "module"
                ],
                "summary": "List module",
                "operationId": "listModule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID to filter module list by. Default to all workspaces.",
                        "name": "workspaceID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Module name to filter module list by. Default to all modules.",
                        "name": "moduleName",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.PaginatedModuleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new Kusion module",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "module"
                ],
                "summary": "Create module",
                "operationId": "createModule",
                "parameters": [
                    {
                        "description": "Created module",
                        "name": "module",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateModuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Module"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/modules/{moduleName}": {
            "get": {
                "description": "Get module information by module name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "module"
                ],
                "summary": "Get module",
                "operationId": "getModule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Module Name",
                        "name": "moduleName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Module"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update the specified module",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "module"
                ],
                "summary": "Update module",
                "operationId": "updateModule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Module Name",
                        "name": "moduleName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated module",
                        "name": "module",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateModuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Module"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete the specified module by name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "module"
                ],
                "summary": "Delete module",
                "operationId": "deleteModule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Module Name",
                        "name": "moduleName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/orgs": {
            "get": {
                "description": "List all organizations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "List organizations",
                "operationId": "listOrganization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.PaginatedOrganizationResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Create organization",
                "operationId": "createOrganization",
                "parameters": [
                    {
                        "description": "Created organization",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/orgs/{orgID}": {
            "get": {
                "description": "Get organization information by organization ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Get organization",
                "operationId": "getOrganization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update the specified organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Update organization",
                "operationId": "updateOrganization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated organization",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete specified organization by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Delete organization",
                "operationId": "deleteOrganization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/projects": {
            "get": {
                "description": "List all or a subset of the projects",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "List projects",
                "operationId": "listProject",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "OrganizationID to filter project list by. Default to all projects.",
                        "name": "orgID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Project name to filter project list by. This should only return one result if set.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/response.PaginatedProjectResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Create project",
                "operationId": "createProject",
                "parameters": [
                    {
                        "description": "Created project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/projects/{projectID}": {
            "get": {
                "description": "Get project information by project ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get project",
                "operationId": "getProject",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update the specified project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Update project",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete specified project by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Delete project",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/resources": {
            "get": {
                "description": "List resource information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resource"
                ],
                "summary": "List resource",
                "operationId": "listResource",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The organization ID",
                        "name": "orgID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The project ID",
                        "name": "projectID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The stack ID",
                        "name": "stackID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The resource type",
                        "name": "resourceType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The resource plane",
                        "name": "resourcePlane",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/response.PaginatedResourceResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/resources/graph": {
            "get": {
                "description": "Get resource graph by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resource"
                ],
                "summary": "Get resource graph",
                "operationId": "getResourceGraph",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ResourceGraph"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/resources/{resourceID}": {
            "get": {
                "description": "Get resource information by resource ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resource"
                ],
                "summary": "Get resource",
                "operationId": "getResource",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Resource ID",
                        "name": "resourceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Resource"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/runs": {
            "get": {
                "description": "List all runs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "List runs",
                "operationId": "listRun",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ProjectID to filter runs by. Default to all",
                        "name": "projectID",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "RunType to filter runs by. Default to all",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "RunStatus to filter runs by. Default to all",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "StackID to filter runs by. Default to all",
                        "name": "stackID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Workspace to filter runs by. Default to all",
                        "name": "workspace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "StartTime to filter runs by. Default to all. Format: RFC3339",
                        "name": "startTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "EndTime to filter runs by. Default to all. Format: RFC3339",
                        "name": "endTime",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.PaginatedRunResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/runs/{runID}": {
            "get": {
                "description": "Get run information by run ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "run"
                ],
                "summary": "Get run",
                "operationId": "getRun",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Run ID",
                        "name": "runID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Run"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/runs/{runID}/result": {
            "get": {
                "description": "Get run result by run ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "run"
                ],
                "summary": "Get run result",
                "operationId": "getRunResult",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Run ID",
                        "name": "runID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/sources": {
            "get": {
                "description": "List source information by source ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "source"
                ],
                "summary": "List source",
                "operationId": "listSource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source name to filter source list by. Default to all sources.",
                        "name": "sourceName",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.PaginatedSourceResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new source",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "source"
                ],
                "summary": "Create source",
                "operationId": "createSource",
                "parameters": [
                    {
                        "description": "Created source",
                        "name": "source",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateSourceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Source"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/sources/{sourceID}": {
            "get": {
                "description": "Get source information by source ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "source"
                ],
                "summary": "Get source",
                "operationId": "getSource",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Source ID",
                        "name": "sourceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Source"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update the specified source",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "source"
                ],
                "summary": "Update source",
                "operationId": "updateSource",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Source ID",
                        "name": "sourceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated source",
                        "name": "source",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateSourceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Source"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete specified source by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "source"
                ],
                "summary": "Delete source",
                "operationId": "deleteSource",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Source ID",
                        "name": "sourceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks": {
            "get": {
                "description": "List all stacks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "List stacks",
                "operationId": "listStack",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ProjectID to filter stacks by. Default to all",
                        "name": "projectID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "OrgID to filter stacks by. Default to all",
                        "name": "orgID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ProjectName to filter stacks by. Default to all",
                        "name": "projectName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Path to filter stacks by. Default to all",
                        "name": "path",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.PaginatedStackResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new stack",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Create stack",
                "operationId": "createStack",
                "parameters": [
                    {
                        "description": "Created stack",
                        "name": "stack",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateStackRequest"
                        }
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to create an AppConfig from template when creating the stack",
                        "name": "fromTemplate",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to initialize an AppTopology from template when creating the stack",
                        "name": "initTopology",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Stack"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks/{stackID}": {
            "get": {
                "description": "Get stack information by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Get stack",
                "operationId": "getStack",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Stack"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update the specified stack",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Update stack",
                "operationId": "updateStack",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated stack",
                        "name": "stack",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateStackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Stack"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete specified stack by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Delete stack",
                "operationId": "deleteStack",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks/{stackID}/apply": {
            "post": {
                "description": "Apply stack information by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Apply stack",
                "operationId": "applyStack",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The resources to import during the stack preview",
                        "name": "importedResources",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/request.StackImportRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "The target workspace to preview the spec in.",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Import existing resources during the stack preview",
                        "name": "importResources",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Spec ID to use for the apply. Will generate a new spec if omitted.",
                        "name": "specID",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Force the apply even when the stack is locked. May cause concurrency issues!!!",
                        "name": "force",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Apply in dry-run mode",
                        "name": "dryrun",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks/{stackID}/apply/async": {
            "post": {
                "description": "Start a run and asynchronously apply stack changes by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Asynchronously apply stack",
                "operationId": "applyStackAsync",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The resources to import during the stack preview",
                        "name": "importedResources",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/request.StackImportRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "The target workspace to preview the spec in.",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Import existing resources during the stack preview",
                        "name": "importResources",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Spec ID to use for the apply. Will generate a new spec if omitted.",
                        "name": "specID",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Force the apply even when the stack is locked. May cause concurrency issues!!!",
                        "name": "force",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Apply in dry-run mode",
                        "name": "dryrun",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Run"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks/{stackID}/destroy": {
            "post": {
                "description": "Destroy stack information by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Destroy stack",
                "operationId": "destroyStack",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The target workspace to preview the spec in.",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Force the destroy even when the stack is locked. May cause concurrency issues!!!",
                        "name": "force",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Destroy in dry-run mode",
                        "name": "dryrun",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks/{stackID}/destroy/async": {
            "post": {
                "description": "Start a run and asynchronously destroy stack resources by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Asynchronously destroy stack",
                "operationId": "destroyStackAsync",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The target workspace to preview the spec in.",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Force the destroy even when the stack is locked. May cause concurrency issues!!!",
                        "name": "force",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Destroy in dry-run mode",
                        "name": "dryrun",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Run"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks/{stackID}/generate": {
            "post": {
                "description": "Generate stack information by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Generate stack",
                "operationId": "generateStack",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The target workspace to preview the spec in.",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The format to generate the spec in. Choices are: spec. Default to spec.",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Force the generate even when the stack is locked",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Spec"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks/{stackID}/generate/async": {
            "post": {
                "description": "Start a run and asynchronously generate stack spec by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Asynchronously generate stack",
                "operationId": "generateStackAsync",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The target workspace to preview the spec in.",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The format to generate the spec in. Choices are: spec. Default to spec.",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Force the generate even when the stack is locked",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Run"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/stacks/{stackID}/preview": {
            "post": {
                "description": "Start a run and asynchronously preview stack changes by stack ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Asynchronously preview stack",
                "operationId": "previewStackAsync",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stack ID",
                        "name": "stackID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The resources to import during the stack preview",
                        "name": "importedResources",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/request.StackImportRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "The target workspace to preview the spec in.",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Import existing resources during the stack preview",
                        "name": "importResources",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Output format. Choices are: json, default. Default to default output format in Kusion.",
                        "name": "output",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Show detailed output",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Spec ID to use for the preview. Default to the last one generated.",
                        "name": "specID",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Force the preview even when the stack is locked",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Run"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/workspaces": {
            "get": {
                "description": "List all workspaces",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "List workspaces",
                "operationId": "listWorkspace",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "BackendID to filter workspaces by. Default to all",
                        "name": "backendID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The current page to fetch. Default to 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The size of the page. Default to 10",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.PaginatedWorkspaceResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "Create workspace",
                "operationId": "createWorkspace",
                "parameters": [
                    {
                        "description": "Created workspace",
                        "name": "workspace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateWorkspaceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Workspace"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/workspaces/configs/validate": {
            "post": {
                "description": "Validate the configurations in the specified workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "Validate workspace configurations",
                "operationId": "validateWorkspaceConfigs",
                "parameters": [
                    {
                        "description": "Workspace configurations to be validated",
                        "name": "workspace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.WorkspaceConfigs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/request.WorkspaceConfigs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/workspaces/{workspaceID}": {
            "get": {
                "description": "Get workspace information by workspace ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "Get workspace",
                "operationId": "getWorkspace",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspaceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Workspace"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update the specified workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "Update workspace",
                "operationId": "updateWorkspace",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspaceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated workspace",
                        "name": "workspace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateWorkspaceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Workspace"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete specified workspace by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "Delete workspace",
                "operationId": "deleteWorkspace",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspaceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/workspaces/{workspaceID}/configs": {
            "get": {
                "description": "Get configurations in the specified workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "get workspace configurations",
                "operationId": "getWorkspaceConfigs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspaceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/request.WorkspaceConfigs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update the configurations in the specified workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "Update workspace configurations",
                "operationId": "updateWorkspaceConfigs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspaceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated workspace configurations",
                        "name": "workspace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.WorkspaceConfigs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/request.WorkspaceConfigs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/workspaces/{workspaceID}/configs/mod-deps": {
            "post": {
                "description": "Create the module dependencies in kcl.mod of the specified workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "Create the module dependencies of the workspace",
                "operationId": "createWorkspaceModDeps",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspaceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/endpoints": {
            "get": {
                "description": "List all registered endpoints in the router",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "debug"
                ],
                "summary": "List all available endpoints",
                "responses": {
                    "200": {
                        "description": "Endpoints listed successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "constant.RunStatus": {
            "type": "string",
            "enum": [
                "Scheduling",
                "InProgress",
                "Failed",
                "Succeeded",
                "Cancelled",
                "Queued"
            ],
            "x-enum-varnames": [
                "RunStatusScheduling",
                "RunStatusInProgress",
                "RunStatusFailed",
                "RunStatusSucceeded",
                "RunStatusCancelled",
                "RunStatusQueued"
            ]
        },
        "constant.RunType": {
            "type": "string",
            "enum": [
                "Generate",
                "Preview",
                "Apply",
                "Destroy"
            ],
            "x-enum-varnames": [
                "RunTypeGenerate",
                "RunTypePreview",
                "RunTypeApply",
                "RunTypeDestroy"
            ]
        },
        "constant.SourceProviderType": {
            "type": "string",
            "enum": [
                "git",
                "github",
                "oci",
                "local",
                "git"
            ],
            "x-enum-varnames": [
                "SourceProviderTypeGit",
                "SourceProviderTypeGithub",
                "SourceProviderTypeOCI",
                "SourceProviderTypeLocal",
                "DefaultSourceType"
            ]
        },
        "constant.StackState": {
            "type": "string",
            "enum": [
                "UnSynced",
                "Synced",
                "OutOfSync",
                "Creating",
                "Generating",
                "GenerateFailed",
                "Generated",
                "Previewing",
                "PreviewFailed",
                "Previewed",
                "Applying",
                "ApplyFailed",
                "ApplySucceeded",
                "Destroying",
                "DestroyFailed",
                "DestroySucceeded"
            ],
            "x-enum-varnames": [
                "StackStateUnSynced",
                "StackStateSynced",
                "StackStateOutOfSync",
                "StackStateCreating",
                "StackStateGenerating",
                "StackStateGenerateFailed",
                "StackStateGenerated",
                "StackStatePreviewing",
                "StackStatePreviewFailed",
                "StackStatePreviewed",
                "StackStateApplying",
                "StackStateApplyFailed",
                "StackStateApplySucceeded",
                "StackStateDestroying",
                "StackStateDestroyFailed",
                "StackStateDestroySucceeded"
            ]
        },
        "entity.Backend": {
            "type": "object",
            "properties": {
                "backendConfig": {
                    "description": "// Type is the type of the backend.\nType string ` + "`" + `yaml:\"type\" json:\"type\"` + "`" + `\nBackend is the configuration of the backend.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.BackendConfig"
                        }
                    ]
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is the timestamp of the created for the backend.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is a human-readable description of the backend.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the backend.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the name of the backend.",
                    "type": "string"
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the timestamp of the updated for the backend.",
                    "type": "string"
                }
            }
        },
        "entity.Module": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the module.",
                    "type": "string"
                },
                "doc": {
                    "description": "Doc is the documentation URL of the module.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.URL"
                        }
                    ]
                },
                "name": {
                    "description": "Name is the module name.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the module.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "description": "URL is the module oci artifact registry URL.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.URL"
                        }
                    ]
                }
            }
        },
        "entity.ModuleWithVersion": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the module.",
                    "type": "string"
                },
                "doc": {
                    "description": "Doc is the documentation URL of the module.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.URL"
                        }
                    ]
                },
                "name": {
                    "description": "Name is the module name.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the module.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "description": "URL is the module oci artifact registry URL.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.URL"
                        }
                    ]
                },
                "version": {
                    "description": "Version is the module oci artifact version.",
                    "type": "string"
                }
            }
        },
        "entity.Organization": {
            "type": "object",
            "properties": {
                "creationTimestamp": {
                    "description": "CreationTimestamp is the timestamp of the created for the organization.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is a human-readable description of the organization.",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is the human-readable display name.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the organization.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the organization.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the organization.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the organization.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the timestamp of the updated for the organization.",
                    "type": "string"
                }
            }
        },
        "entity.Project": {
            "type": "object",
            "properties": {
                "creationTimestamp": {
                    "description": "CreationTimestamp is the timestamp of the created for the project.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is a human-readable description of the project.",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is the human-readable display name.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the project.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the project.",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization is the configuration source associated with the project.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Organization"
                        }
                    ]
                },
                "owners": {
                    "description": "Owners is a list of owners for the project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "Path is the relative path of the project within the sources.",
                    "type": "string"
                },
                "source": {
                    "description": "Source is the configuration source associated with the project.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Source"
                        }
                    ]
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the timestamp of the updated for the project.",
                    "type": "string"
                }
            }
        },
        "entity.Resource": {
            "type": "object",
            "properties": {
                "LastAppliedRevision": {
                    "description": "LastAppliedRevision is the revision of the last sync.",
                    "type": "string"
                },
                "LastAppliedTimestamp": {
                    "description": "LastAppliedTimestamp is the timestamp of the last sync.",
                    "type": "string"
                },
                "attributes": {
                    "description": "Attributes is the attributes of the resource.",
                    "type": "object",
                    "additionalProperties": true
                },
                "cloudResourceID": {
                    "description": "CloudResourceID is the id of the resource in the cloud.",
                    "type": "string"
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is the timestamp of the created for the resource.",
                    "type": "string"
                },
                "dependsOn": {
                    "description": "DependsOn is the depends on of the resource.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extensions": {
                    "description": "Extensions is the extensions of the resource.",
                    "type": "object",
                    "additionalProperties": true
                },
                "iamResourceID": {
                    "description": "IAMResourceID is the id of the resource in IAM.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the resource.",
                    "type": "integer"
                },
                "kusionResourceID": {
                    "description": "KusionResourceID is the id of the resource in Kusion.",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the resource.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owners": {
                    "description": "Owners is a list of owners for the resource.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "provider": {
                    "description": "Provider is the provider of the resource.",
                    "type": "string"
                },
                "resourceName": {
                    "description": "ResourceName is the name of the resource.",
                    "type": "string"
                },
                "resourcePlane": {
                    "description": "ResourcePlane is the plane of the resource.",
                    "type": "string"
                },
                "resourceType": {
                    "description": "ResourceType is the type of the resource.",
                    "type": "string"
                },
                "resourceURN": {
                    "description": "ResourceURN is the urn of the resource.",
                    "type": "string"
                },
                "stack": {
                    "description": "Stack is the stack associated with the resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Stack"
                        }
                    ]
                },
                "status": {
                    "description": "Status is the status of the resource.",
                    "type": "string"
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the timestamp of the updated for the resource.",
                    "type": "string"
                }
            }
        },
        "entity.ResourceGraph": {
            "type": "object",
            "properties": {
                "relations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.ResourceRelation"
                    }
                },
                "resources": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/entity.ResourceInfo"
                    }
                },
                "workload": {
                    "type": "string"
                }
            }
        },
        "entity.ResourceInfo": {
            "type": "object",
            "properties": {
                "cloudResourceID": {
                    "description": "CloudResourceID is the id of the resource in the cloud.",
                    "type": "string"
                },
                "iamResourceID": {
                    "description": "IAMResourceID is the id of the resource in IAM.",
                    "type": "string"
                },
                "resourceName": {
                    "description": "ResourceName is the name of the resource.",
                    "type": "string"
                },
                "resourcePlane": {
                    "description": "ResourcePlane is the plane of the resource.",
                    "type": "string"
                },
                "resourceType": {
                    "description": "ResourceType is the type of the resource.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the resource.",
                    "type": "string"
                }
            }
        },
        "entity.ResourceRelation": {
            "type": "object",
            "properties": {
                "dependencyResource": {
                    "type": "string"
                },
                "dependentResource": {
                    "type": "string"
                }
            }
        },
        "entity.Run": {
            "type": "object",
            "properties": {
                "creationTimestamp": {
                    "description": "CreationTimestamp is the timestamp of the created for the run.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the run.",
                    "type": "integer"
                },
                "logs": {
                    "description": "Logs is the logs of the run.",
                    "type": "string"
                },
                "result": {
                    "description": "Result is the result of the run.",
                    "type": "string"
                },
                "stack": {
                    "description": "Stack is the stack of the run.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Stack"
                        }
                    ]
                },
                "status": {
                    "description": "Status is the status of the run.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.RunStatus"
                        }
                    ]
                },
                "trace": {
                    "description": "Trace is the trace of the run.",
                    "type": "string"
                },
                "type": {
                    "description": "RunType is the type of the run provider.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.RunType"
                        }
                    ]
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the timestamp of the updated for the run.",
                    "type": "string"
                },
                "workspace": {
                    "description": "Workspace is the target workspace of the run.",
                    "type": "string"
                }
            }
        },
        "entity.Source": {
            "type": "object",
            "properties": {
                "creationTimestamp": {
                    "description": "CreationTimestamp is the timestamp of the created for the source.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is a human-readable description of the source.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the source.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the source.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the source.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the source.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remote": {
                    "description": "Remote is the source URL, including scheme.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.URL"
                        }
                    ]
                },
                "sourceProvider": {
                    "description": "SourceProvider is the type of the source provider.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.SourceProviderType"
                        }
                    ]
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the timestamp of the updated for the source.",
                    "type": "string"
                }
            }
        },
        "entity.Stack": {
            "type": "object",
            "properties": {
                "creationTimestamp": {
                    "description": "CreationTimestamp is the timestamp of the created for the stack.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is a human-readable description of the stack.",
                    "type": "string"
                },
                "desiredVersion": {
                    "description": "Desired is the desired version of stack.",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is the human-readable display nams.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the stack.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the stack.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "lastAppliedRevision": {
                    "description": "LastAppliedRevision is the spec ID of the last apply operation for the stack.",
                    "type": "string"
                },
                "lastAppliedTimestamp": {
                    "description": "LastAppliedTimestamp is the timestamp of the last apply operation for the stack.",
                    "type": "string"
                },
                "lastGeneratedRevision": {
                    "description": "LastGeneratedRevision is the spec ID of the last generate operation for the stack.",
                    "type": "string"
                },
                "lastPreviewedRevision": {
                    "description": "LastPreviewedRevision is the spec ID of the last preview operation for the stack.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the stack.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the stack.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "Path is the relative path of the stack within the sourcs.",
                    "type": "string"
                },
                "project": {
                    "description": "Project is the project associated with the stack.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Project"
                        }
                    ]
                },
                "syncState": {
                    "description": "SyncState is the current state of the stack.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.StackState"
                        }
                    ]
                },
                "type": {
                    "description": "Type is the type of the stack.",
                    "type": "string"
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the timestamp of the updated for the stack.",
                    "type": "string"
                }
            }
        },
        "entity.Workspace": {
            "type": "object",
            "properties": {
                "backend": {
                    "description": "Backend is the corresponding backend for this workspace.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Backend"
                        }
                    ]
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is the timestamp of the created for the workspace.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is a human-readable description of the workspace.",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is the human-readable display name.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the workspace.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the workspace.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the workspace.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the workspace.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the timestamp of the updated for the workspace.",
                    "type": "string"
                }
            }
        },
        "handler.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "handler.Response": {
            "type": "object",
            "properties": {
                "costTime": {
                    "description": "Time taken for the request.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handler.Duration"
                        }
                    ]
                },
                "data": {
                    "description": "Data payload."
                },
                "endTime": {
                    "description": "Request end time.",
                    "type": "string"
                },
                "message": {
                    "description": "Descriptive message.",
                    "type": "string"
                },
                "startTime": {
                    "description": "Request start time.",
                    "type": "string"
                },
                "success": {
                    "description": "Indicates success status.",
                    "type": "boolean"
                },
                "traceID": {
                    "description": "Trace identifier.",
                    "type": "string"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AWSProvider": {
            "type": "object",
            "properties": {
                "profile": {
                    "description": "The profile to be used to interact with AWS Secrets Manager.\nIf not set, the default profile created with ` + "`" + `aws configure` + "`" + ` will be used.",
                    "type": "string"
                },
                "region": {
                    "description": "AWS Region to be used to interact with AWS Secrets Manager.\nExamples are us-east-1, us-west-2, etc.",
                    "type": "string"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AlicloudProvider": {
            "type": "object",
            "properties": {
                "region": {
                    "description": "Alicloud Region to be used to interact with Alicloud Secrets Manager.\nExamples are cn-beijing, cn-shanghai, etc.",
                    "type": "string"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AzureEnvironmentType": {
            "type": "string",
            "enum": [
                "PublicCloud",
                "USGovernmentCloud",
                "ChinaCloud",
                "GermanCloud"
            ],
            "x-enum-varnames": [
                "AzureEnvironmentPublicCloud",
                "AzureEnvironmentUSGovernmentCloud",
                "AzureEnvironmentChinaCloud",
                "AzureEnvironmentGermanCloud"
            ]
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AzureKVProvider": {
            "type": "object",
            "properties": {
                "environmentType": {
                    "description": "EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure.\nBy-default it points to the public cloud AAD endpoint, and the following endpoints are available:\nPublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud\nRef: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AzureEnvironmentType"
                        }
                    ]
                },
                "tenantId": {
                    "description": "TenantID configures the Azure Tenant to send requests to.",
                    "type": "string"
                },
                "vaultUrl": {
                    "description": "Vault Url from which the secrets to be fetched from.",
                    "type": "string"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.BackendConfig": {
            "type": "object",
            "properties": {
                "configs": {
                    "description": "Configs contains config items of the backend, whose keys differ from different backend types.",
                    "type": "object",
                    "additionalProperties": {}
                },
                "type": {
                    "description": "Type is the backend type, supports BackendTypeLocal, BackendTypeOss, BackendTypeS3.",
                    "type": "string"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Configs": {
            "type": "object",
            "properties": {
                "default": {
                    "description": "Default is default block of the module config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.GenericConfig"
                        }
                    ]
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.FakeProvider": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.FakeProviderData"
                    }
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.FakeProviderData": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.GenericConfig": {
            "type": "object",
            "additionalProperties": {}
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModuleConfig": {
            "type": "object",
            "properties": {
                "configs": {
                    "description": "Configs contains all levels of module configs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Configs"
                        }
                    ]
                },
                "path": {
                    "description": "Path is the path of the module. It can be a local path or a remote URL",
                    "type": "string"
                },
                "version": {
                    "description": "Version is the version of the module.",
                    "type": "string"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModuleConfigs": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModuleConfig"
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModulePatcherConfig": {
            "type": "object",
            "properties": {
                "projectSelector": {
                    "description": "ProjectSelector contains the selected projects.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.OnPremisesProvider": {
            "type": "object",
            "properties": {
                "attributes": {
                    "description": "attributes of the provider",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "platform name of the provider",
                    "type": "string"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ProviderSpec": {
            "type": "object",
            "properties": {
                "alicloud": {
                    "description": "Alicloud configures a store to retrieve secrets from Alicloud Secrets Manager.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AlicloudProvider"
                        }
                    ]
                },
                "aws": {
                    "description": "AWS configures a store to retrieve secrets from AWS Secrets Manager.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AWSProvider"
                        }
                    ]
                },
                "azure": {
                    "description": "Azure configures a store to retrieve secrets from Azure KeyVault.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.AzureKVProvider"
                        }
                    ]
                },
                "fake": {
                    "description": "Fake configures a store with static key/value pairs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.FakeProvider"
                        }
                    ]
                },
                "onpremises": {
                    "description": "Onprem configures a store in on-premises environments",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.OnPremisesProvider"
                        }
                    ]
                },
                "vault": {
                    "description": "Vault configures a store to retrieve secrets from HashiCorp Vault.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.VaultProvider"
                        }
                    ]
                },
                "viettelcloud": {
                    "description": "ViettelCloud configures a store to retrieve secrets from ViettelCloud Secrets Manager.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ViettelCloudProvider"
                        }
                    ]
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Resource": {
            "type": "object",
            "properties": {
                "attributes": {
                    "description": "Attributes represents all specified attributes of this resource",
                    "type": "object",
                    "additionalProperties": true
                },
                "dependsOn": {
                    "description": "DependsOn contains all resources this resource depends on",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extensions": {
                    "description": "Extensions specifies arbitrary metadata of this resource",
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "description": "ID is the unique key of this resource.\nApiVersion:Kind:Namespace:Name is an idiomatic way for Kubernetes resources.\nproviderNamespace:providerName:resourceType:resourceName for Terraform resources",
                    "type": "string"
                },
                "type": {
                    "description": "Type represents all Context we supported like Kubernetes and Terraform",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Type"
                        }
                    ]
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.SecretStore": {
            "type": "object",
            "properties": {
                "provider": {
                    "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ProviderSpec"
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Spec": {
            "type": "object",
            "properties": {
                "context": {
                    "description": "Context contains workspace-level configurations, such as runtimes, topologies, and metadata, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.GenericConfig"
                        }
                    ]
                },
                "resources": {
                    "description": "Resources is the list of Resource this Spec contains.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Resource"
                    }
                },
                "secretStore": {
                    "description": "SecretSore represents a external secret store location for storing secrets.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.SecretStore"
                        }
                    ]
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Type": {
            "type": "string",
            "enum": [
                "Kubernetes",
                "Terraform"
            ],
            "x-enum-varnames": [
                "Kubernetes",
                "Terraform"
            ]
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.VaultKVStoreVersion": {
            "type": "string",
            "enum": [
                "v1",
                "v2"
            ],
            "x-enum-varnames": [
                "VaultKVStoreV1",
                "VaultKVStoreV2"
            ]
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.VaultProvider": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "Path is the mount path of the Vault KV backend endpoint, e.g: \"secret\".",
                    "type": "string"
                },
                "server": {
                    "description": "Server is the target Vault server address to connect, e.g: \"https://vault.example.com:8200\".",
                    "type": "string"
                },
                "version": {
                    "description": "Version is the Vault KV secret engine version. Version can be either \"v1\" or\n\"v2\", defaults to \"v2\".",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.VaultKVStoreVersion"
                        }
                    ]
                }
            }
        },
        "kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ViettelCloudProvider": {
            "type": "object",
            "properties": {
                "cmpURL": {
                    "description": "ViettelCloud CMP URL to be used to interact with ViettelCloud Secrets Manager.\nExamples are https://console.viettelcloud.vn/api/",
                    "type": "string"
                },
                "projectID": {
                    "description": "ProjectID to be used to interact with ViettelCloud Secrets Manager.",
                    "type": "string"
                }
            }
        },
        "models.ActionType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-comments": {
                "Create": "creating a new resource.",
                "Delete": "deleting an existing resource.",
                "UnChanged": "nothing to do.",
                "Undefined": "invalidate value",
                "Update": "updating an existing resource."
            },
            "x-enum-varnames": [
                "Undefined",
                "UnChanged",
                "Create",
                "Update",
                "Delete"
            ]
        },
        "models.ChangeStep": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "the operation performed by this step",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ActionType"
                        }
                    ]
                },
                "from": {
                    "description": "old data"
                },
                "id": {
                    "description": "the resource id",
                    "type": "string"
                },
                "to": {
                    "description": "new data"
                }
            }
        },
        "models.Changes": {
            "type": "object",
            "properties": {
                "changeSteps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.ChangeStep"
                    }
                },
                "stepKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "request.CreateBackendRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "backendConfig": {
                    "description": "BackendConfig is the configuration of the backend.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.BackendConfig"
                        }
                    ]
                },
                "description": {
                    "description": "Description is a human-readable description of the backend.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the backend.",
                    "type": "string"
                }
            }
        },
        "request.CreateModuleRequest": {
            "type": "object",
            "required": [
                "name",
                "url"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the module.",
                    "type": "string"
                },
                "doc": {
                    "description": "Doc is the documentation URL of the module.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the module name.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the module.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "description": "URL is the module oci artifact registry URL.",
                    "type": "string"
                }
            }
        },
        "request.CreateOrganizationRequest": {
            "type": "object",
            "required": [
                "owners"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the organization.",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the organization.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the organization.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the organization.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "request.CreateProjectRequest": {
            "type": "object",
            "required": [
                "domain"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the project.",
                    "type": "string"
                },
                "domain": {
                    "description": "Domain is the domain of the project, typically serving as the parent folder name for the project.",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the project.",
                    "type": "string"
                },
                "organizationID": {
                    "description": "OrganizationID is the organization id associated with the project.",
                    "type": "integer"
                },
                "owners": {
                    "description": "Owners is a list of owners for the project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "Path is the relative path of the project within the sources.",
                    "type": "string"
                },
                "sourceID": {
                    "description": "SourceID is the configuration source id associated with the project.",
                    "type": "integer"
                }
            }
        },
        "request.CreateSourceRequest": {
            "type": "object",
            "required": [
                "name",
                "remote",
                "sourceProvider"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the source.",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the source.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the source.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the source.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remote": {
                    "description": "Remote is the source URL, including scheme.",
                    "type": "string"
                },
                "sourceProvider": {
                    "description": "SourceProvider is the type of the source provider.",
                    "type": "string"
                }
            }
        },
        "request.CreateStackRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the stack.",
                    "type": "string"
                },
                "desiredVersion": {
                    "description": "DesiredVersion is the desired revision of stack.",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the stack.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the stack.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the stack.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "Path is the relative path of the stack within the source.",
                    "type": "string"
                },
                "projectID": {
                    "description": "ProjectID is the project id of the stack within the source.",
                    "type": "integer"
                },
                "projectName": {
                    "description": "ProjectName is the project name of the stack within the source.",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the type of the stack.",
                    "type": "string"
                }
            }
        },
        "request.CreateWorkspaceRequest": {
            "type": "object",
            "required": [
                "backendID",
                "name",
                "owners"
            ],
            "properties": {
                "backendID": {
                    "description": "BackendID is the configuration backend id associated with the workspace.",
                    "type": "integer"
                },
                "description": {
                    "description": "Description is a human-readable description of the workspace.",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the workspace.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the workspace.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the workspace.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "request.StackImportRequest": {
            "type": "object",
            "properties": {
                "importedResources": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "request.UpdateBackendRequest": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "backendConfig": {
                    "description": "BackendConfig is the configuration of the backend.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.BackendConfig"
                        }
                    ]
                },
                "description": {
                    "description": "Description is a human-readable description of the backend.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the backend.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the name of the backend.",
                    "type": "string"
                }
            }
        },
        "request.UpdateModuleRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the module.",
                    "type": "string"
                },
                "doc": {
                    "description": "Doc is the documentation URL of the module.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the module name.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the module.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "description": "URL is the module oci artifact registry URL.",
                    "type": "string"
                }
            }
        },
        "request.UpdateOrganizationRequest": {
            "type": "object",
            "required": [
                "id",
                "owners"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the organization.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the organization.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the organization.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the organization.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the organization.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "request.UpdateProjectRequest": {
            "type": "object",
            "required": [
                "domain",
                "id"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the project.",
                    "type": "string"
                },
                "domain": {
                    "description": "Domain is the domain of the project, typically serving as the parent folder name for the project.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the project.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the project.",
                    "type": "string"
                },
                "organizationID": {
                    "description": "OrganizationID is the organization id associated with the project.",
                    "type": "integer"
                },
                "owners": {
                    "description": "Owners is a list of owners for the project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "Path is the relative path of the project within the sources.",
                    "type": "string"
                },
                "sourceID": {
                    "description": "SourceID is the configuration source id associated with the project.",
                    "type": "integer"
                }
            }
        },
        "request.UpdateSourceRequest": {
            "type": "object",
            "required": [
                "id",
                "name",
                "remote",
                "sourceProvider"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the source.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the source.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the source.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the source.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the source.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remote": {
                    "description": "Remote is the source URL, including scheme.",
                    "type": "string"
                },
                "sourceProvider": {
                    "description": "SourceProvider is the type of the source provider.",
                    "type": "string"
                }
            }
        },
        "request.UpdateStackRequest": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the stack.",
                    "type": "string"
                },
                "desiredVersion": {
                    "description": "DesiredVersion is the desired revision of stack.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the stack.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the stack.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the stack.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the stack.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "Path is the relative path of the stack within the source.",
                    "type": "string"
                },
                "projectID": {
                    "description": "ProjectID is the project id of the stack within the source.",
                    "type": "integer"
                },
                "projectName": {
                    "description": "ProjectName is the project name of the stack within the source.",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the type of the stack.",
                    "type": "string"
                }
            }
        },
        "request.UpdateWorkspaceRequest": {
            "type": "object",
            "required": [
                "backendID",
                "id",
                "owners"
            ],
            "properties": {
                "backendID": {
                    "description": "BackendID is the configuration backend id associated with the workspace.",
                    "type": "integer"
                },
                "description": {
                    "description": "Description is a human-readable description of the workspace.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the id of the workspace.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels are custom labels associated with the workspace.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the workspace.",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for the workspace.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "request.WorkspaceConfigs": {
            "type": "object",
            "properties": {
                "context": {
                    "description": "Context contains workspace-level configurations, such as runtimes, topologies, and metadata, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.GenericConfig"
                        }
                    ]
                },
                "modules": {
                    "description": "Modules are the configs of a set of modules.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.ModuleConfigs"
                        }
                    ]
                },
                "secretStore": {
                    "description": "SecretStore represents a secure external location for storing secrets.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.SecretStore"
                        }
                    ]
                }
            }
        },
        "response.PaginatedBackendResponse": {
            "type": "object",
            "properties": {
                "backends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Backend"
                    }
                },
                "currentPage": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.PaginatedModuleResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Module"
                    }
                },
                "modulesWithVersion": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.ModuleWithVersion"
                    }
                },
                "pageSize": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.PaginatedOrganizationResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Organization"
                    }
                },
                "pageSize": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.PaginatedProjectResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Project"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.PaginatedResourceResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Resource"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.PaginatedRunResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "runs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Run"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.PaginatedSourceResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Source"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.PaginatedStackResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "stacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Stack"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.PaginatedWorkspaceResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "workspaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Workspace"
                    }
                }
            }
        },
        "url.URL": {
            "type": "object",
            "properties": {
                "forceQuery": {
                    "description": "append a query ('?') even if RawQuery is empty",
                    "type": "boolean"
                },
                "fragment": {
                    "description": "fragment for references, without '#'",
                    "type": "string"
                },
                "host": {
                    "description": "host or host:port (see Hostname and Port methods)",
                    "type": "string"
                },
                "omitHost": {
                    "description": "do not emit empty host (authority)",
                    "type": "boolean"
                },
                "opaque": {
                    "description": "encoded opaque data",
                    "type": "string"
                },
                "path": {
                    "description": "path (relative paths may omit leading slash)",
                    "type": "string"
                },
                "rawFragment": {
                    "description": "encoded fragment hint (see EscapedFragment method)",
                    "type": "string"
                },
                "rawPath": {
                    "description": "encoded path hint (see EscapedPath method)",
                    "type": "string"
                },
                "rawQuery": {
                    "description": "encoded query values, without '?'",
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "user": {
                    "description": "username and password information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.Userinfo"
                        }
                    ]
                }
            }
        },
        "url.Userinfo": {
            "type": "object"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
