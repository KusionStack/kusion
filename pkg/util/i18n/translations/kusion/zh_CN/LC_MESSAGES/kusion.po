# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: gettext-go-examples-hello\n"
"Report-Msgid-Bugs-To: EMAIL\n"
"POT-Creation-Date: 2024-01-04 21:38+0800\n"
"PO-Revision-Date: 2023-07-24 16:46+0800\n"
"Last-Translator: howieyuen <howieyuen@outlook.com>\n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.3.2\n"

#: pkg/cmd/preview/preview.go:73
msgid "Ignore differences of target fields"
msgstr "忽略目标字段的差异"

#: pkg/cmd/workspace/cmd.go:19
msgid ""
"\n"
"\t\tWorkspace is a logical concept representing a target that stacks will be "
"deployed to.\n"
"\t\t\n"
"\t\tWorkspace is managed by platform engineers, which contains a set of "
"configurations that application developers do not want or should not "
"concern, and is reused by multiple stacks belonging to different projects."
msgstr ""

#: pkg/cmd/deps/deps.go:14
msgid ""
"\n"
"\t\tShow the KCL file dependency information in the current directory or the "
"specified workdir.\n"
"    By default, it will list all the KCL files that are dependent on the "
"given package path."
msgstr ""

#: pkg/cmd/deps/deps.go:51
msgid ""
"Inspect direct of the dependency information. Valid values: up, down. "
"Defaults to up"
msgstr "Project 信息的输出格式。可选值：json、yaml、tree、human"

#: pkg/cmd/init/init.go:15
msgid ""
"\n"
"\t\tThis command initializes the scaffolding for a project, generating a "
"project from an appointed template with correct structure.\n"
"\n"
"\t\tThe scaffold templates can be retrieved from local or online. The built-"
"in templates are used by default, self-defined templates are also supported "
"by assigning the template repository path."
msgstr ""
"\n"
"\t\t该指令用于初始化一个 Project 脚手架，从选定的模板生成具备正确结构的 "
"Project。\n"
"\n"
"\t\t脚手架模板可以从本地或者线上获取。默认使用内置模板；若需要使用自定义的模"
"板，需要指定模板仓库的地址。"

#: pkg/cmd/init/init.go:58
msgid ""
"Force generating the scaffolding files, even if it would change the existing "
"files"
msgstr "强制生成脚手架文件，即使会更改现有文件"

#: pkg/cmd/init/init.go:81
msgid ""
"\n"
"\t\t# Get name and description of internal templates\n"
"\t\tkusion init templates\n"
"\n"
"\t\t# Get templates from specific templates repository\n"
"\t\tkusion init templates https://github.com/<user>/<repo> --online=true"
msgstr ""
"\n"
"\t\t# 获取内置模板的名称和描述\n"
"\t\tkusion init templates\n"
"\n"
"\t\t# 获取指定的在线仓库中的模板列表\n"
"\t\tkusion init templates https://github.com/<user>/<repo> —online=true"

#: pkg/cmd/preview/preview.go:21
#, fuzzy
msgid ""
"\n"
"\t\t# Preview with specified work directory\n"
"\t\tkusion preview -w /path/to/workdir\n"
"\t\n"
"\t\t# Preview with specified arguments\n"
"\t\tkusion preview -D name=test -D age=18\n"
"\n"
"\t\t# Preview with specified intent file\n"
"\t\tkusion preview --intent-file intent.yaml\n"
"\t\n"
"\t\t# Preview with ignored fields\n"
"\t\tkusion preview --ignore-fields=\"metadata.generation,metadata."
"managedFields\n"
"\t\t\n"
"\t\t# Preview with json format result\n"
"\t\tkusion preview -o json\n"
"\n"
"\t\t# Preview without output style and color\n"
"\t\tkusion preview --no-style=true"
msgstr ""
"\n"
"\t\t# 使用指定工作目录进行预览\n"
"\t\tkusion preview -w /path/to/workdir\n"
"\n"
"\t\t# 使用指定参数预览\n"
"\t\tkusion preview -D name=test -D age=18\n"
"\n"
"\t\t# 指定设置文件预览\n"
"\t\tkusion preview -Y settings.yaml\n"
"\n"
"\t\t# 预览结果设置为 JSON 格式\n"
"\t\tkusion preview -o json\n"
"\n"
"\t\t# 预览结果不带样式和颜色\n"
"\t\tkusion preview —no-style=true"

#: pkg/cmd/init/init.go:111
msgid ""
"Specify the output format of templates. If specified, only support json for "
"now; if not, template name and description is given"
msgstr ""
"指定模板的输出格式。若指定，现在仅支持 json；若不指定，那么将打印模板的名称和"
"描述"

#: pkg/cmd/preview/preview.go:15
#, fuzzy
msgid ""
"\n"
"\t\tPreview a series of resource changes within the stack.\n"
"\t\n"
"\t\tCreate, update or delete resources according to the intent described in "
"the a stack. By default,\n"
"\t\tKusion will generate an execution plan and present it for your approval "
"before taking any action."
msgstr ""
"\n"
"\t\t预览 Stack 中的一系列资源更改。\n"
"\n"
"\t\t根据 Stack 内的 KCL 文件创建或更新或删除资源。\n"
"\t\t默认情况下，Kusion 会生成一个执行计划并在采取任何行动之前将其提交给您批"
"准。"

#: pkg/cmd/apply/apply.go:22
#, fuzzy
msgid ""
"\n"
"\t\t# Apply with specified work directory\n"
"\t\tkusion apply -w /path/to/workdir\n"
"\t\n"
"\t\t# Apply with specified arguments\n"
"\t\tkusion apply -D name=test -D age=18\n"
"\n"
"\t\t# Apply with specified intent file\n"
"\t\tkusion apply --intent-file intent.yaml\n"
"\n"
"\t\t# Apply with specifying intent file\n"
"\t\tkusion apply --intent-file intent.yaml \n"
"\t\n"
"\t\t# Skip interactive approval of plan details before applying\n"
"\t\tkusion apply --yes\n"
"\t\t\n"
"\t\t# Apply without output style and color\n"
"\t\tkusion apply --no-style=true"
msgstr ""
"\n"
"\t\t# 指定工作目录 apply\n"
"\t\tkusion apply -w /path/to/workdir\n"
"\n"
"\t\t# 指定参数 apply\n"
"\t\tkusion apply -D name=test -D age=18\n"
"\n"
"\t\t# 指定配置文件 apply\n"
"\t\tkusion apply -Y settings.yaml\n"
"\n"
"\t\t# apply 前跳过计划的交互式审批\n"
"\t\tkusion apply —yes\n"
"\n"
"\t\t# apply 输出结果不带样式和颜色\n"
"\t\tkusion apply —no-style=true"

#: pkg/cmd/deps/deps.go:55
msgid ""
"Direct is set to \"down\", \"only\" means only the downstream project/stack "
"list will be output. Valid values: project, stack. Defaults to project"
msgstr ""

#: pkg/cmd/destroy/destroy.go:15
#, fuzzy
msgid ""
"\n"
"\t\tDestroy resources within the stack.\n"
"\n"
"\t\tPlease note that the destroy command does NOT perform resource version "
"checks.\n"
"\t\tTherefore, if someone submits an update to a resource at the same time "
"you execute a destroy command, \n"
"\t\ttheir update will be lost along with the rest of the resource."
msgstr ""
"\n"
"\t\t通过资源规约删除资源。\n"
"\n"
"\t\t只接受 KCL 文件。只能指定一种类型的参数：文件名、资源、名称、资源或标签选"
"择器。\n"
"\n"
"\t\t请注意，destroy 命令不会进行资源版本检查，\n"
"\t\t因此如果有人在你提交销毁时提交了对资源的更新，\n"
"\t\t他们的更新将与资源一起丢失。"

#: pkg/cmd/destroy/destroy.go:48
msgid "Automatically show plan details after previewing it"
msgstr "预览后自动展示 apply 计划细节"

#: pkg/cmd/init/init.go:76
msgid "List templates used to initialize a project"
msgstr "列出用于初始化 Project 的模板"

#: pkg/cmd/init/init.go:78
msgid ""
"\n"
"\t\tThis command gets the descriptions and definitions of the templates "
"which are used to initialize the project scaffolding."
msgstr ""
"\n"
"\t\t该指令获取用于初始化 Project 脚手架的模板的描述和定义。"

#: pkg/cmd/cmd.go:62
msgid "Kusion is the Platform Orchestrator of Internal Developer Platform"
msgstr ""

#: pkg/cmd/destroy/destroy.go:13
#, fuzzy
msgid "Destroy resources within the stack."
msgstr "预览 Stack 中的一系列资源更改"

#: pkg/cmd/preview/preview.go:13
msgid "Preview a series of resource changes within the stack"
msgstr "预览 Stack 中的一系列资源更改"

#: pkg/cmd/preview/preview.go:67
#, fuzzy
msgid "Automatically show plan details with interactive options"
msgstr "预览后自动展示 apply 计划细节"

#: pkg/cmd/workspace/cmd.go:17
msgid ""
"Workspace is a logical concept representing a target that stacks will be "
"deployed to"
msgstr ""

#: pkg/cmd/apply/apply.go:64
msgid ""
"Preview the execution effect (always successful) without actually applying "
"the changes"
msgstr "dry-run 预览执行效果（总是成功）而不实际 apply 更改"

#: pkg/cmd/init/init.go:13
msgid "Initialize the scaffolding for a project"
msgstr "初始化一个 Project 的脚手架"

#: pkg/cmd/init/init.go:20
msgid ""
"\n"
"\t\t# Initialize a project from internal templates\n"
"\t\tkusion init\n"
"\n"
"\t\t# Initialize a project from default online templates\n"
"\t\tkusion init --online=true\n"
"\n"
"\t\t# Initialize a project from a specific online template\n"
"\t\tkusion init https://github.com/<user>/<repo> --online=true\n"
"\n"
"\t\t# Initialize a project from a specific local template\n"
"\t\tkusion init /path/to/templates"
msgstr ""
"\n"
"\t\t# 从本地内置模板中初始化一个 Project\n"
"\t\tkusion init\n"
"\n"
"\t\t# 从默认的在线模板中初始化一个 Project\n"
"\t\tkusion init --online=true\n"
"\n"
"\t\t# 从指定的在线模板初始化一个 Project\n"
"\t\tkusion init https://github.com/<user>/<repo> --online=true\n"
"\n"
"\t\t# 从指定的本地模板初始化一个 Project\n"
"\t\tkusion init /path/to/templates"

#: pkg/cmd/apply/apply.go:62 pkg/cmd/destroy/destroy.go:46
msgid "Automatically approve and perform the update after previewing it"
msgstr "预览后自动审批并应用更新"

#: pkg/cmd/apply/apply.go:66
msgid ""
"After creating/updating/deleting the requested object, watch for changes"
msgstr "在创建/更新/删除请求的对象后，观测变更"

#: pkg/cmd/init/init.go:52
msgid ""
"Initialize with specified template. If not specified, a prompt will request "
"it"
msgstr "用指定的模板初始化。若不指定，将有提示请求获取"

#: pkg/cmd/init/init.go:61
msgid ""
"Use templates from online repository to initialize project, or use locally "
"cached templates"
msgstr "使用线上模板初始化 Project，否则使用本地缓存模板"

#: pkg/cmd/init/init.go:64
msgid "Skip prompts and proceed with default values"
msgstr "跳过提示，使用默认值初始化 Project"

#: pkg/cmd/deps/deps.go:12
msgid "Show KCL file dependency information"
msgstr ""

#: pkg/cmd/destroy/destroy.go:44 pkg/cmd/preview/preview.go:65
msgid "Specify the operator"
msgstr "指定操作人"

#: pkg/cmd/init/init.go:67
msgid ""
"Custom params in JSON. If specified, it will be used as the template default "
"value and skip prompts"
msgstr ""
"JSON 格式的自定义参数。若指定，那么会用其作为默认的模板参数，并跳过提示"

#: pkg/cmd/preview/preview.go:69
msgid "Automatically show all plan details, combined use with flag `--detail`"
msgstr "预览后自动展示执行计划细节"

#: pkg/engine/backend/options.go:45
msgid "backend-config config state storage backend"
msgstr "backend-config 配置状态存储后端信息"

#: pkg/cmd/preview/preview.go:77
#, fuzzy
msgid ""
"Specify the intent file path as input, and the intent file must be located "
"in the working directory or its subdirectories"
msgstr "指定 spec 文件路径作为输入，spce 文件必须位于工作目录或其子目录下"

#: pkg/engine/backend/options.go:43
msgid "backend-type specify state storage backend"
msgstr "backend-type 指定状态存储后端类型，支持 local、db、oss 和 s3"

#: pkg/cmd/apply/apply.go:13
#, fuzzy
msgid "Apply the operational intent of various resources to multiple runtimes"
msgstr ""
"将各类资源的运维意图 apply 至多种运行时里 (Kubernetes、AWS/阿里云以及自建系统"
"等)"

#: pkg/cmd/compile/compile.go:16
msgid "Deprecated"
msgstr ""

#: pkg/cmd/deps/deps.go:18
msgid ""
"\n"
"\t\t# List all the KCL files that are dependent by the given focus paths\n"
"        kusion deps --focus path/to/focus1 --focus path/to/focus2\n"
"\n"
"\t\t# List all the projects that depend on the given focus paths\n"
"\t\tkusion deps --direct down --focus path/to/focus1 --focus path/to/focus2\n"
"\n"
"\t\t# List all the stacks that depend on the given focus paths\n"
"\t\tkusion deps --direct down --focus path/to/focus1 --focus path/to/focus2 "
"--only stack\n"
"\n"
"\t\t# List all the projects that depend on the given focus paths, ignoring "
"some paths from entrance files in each stack\n"
"\t\tkusion deps --direct down --focus path/to/focus1 --focus path/to/focus2 "
"--ignore path/to/ignore"
msgstr ""

#: pkg/cmd/deps/deps.go:57
msgid ""
"File paths to ignore when filtering the affected stacks/projects. Each path "
"needs to be a valid relative path from the workdir. If not set, no paths "
"will be ignored."
msgstr ""

#: pkg/cmd/destroy/destroy.go:22
#, fuzzy
msgid ""
"\n"
"\t\t# Delete resources of current stack\n"
"\t\tkusion destroy"
msgstr ""
"\n"
"\t\t# 删除 pod.k 中的配置\n"
"\t\tkusion destroy -f ./pod.k"

#: pkg/cmd/init/init.go:55
msgid ""
"Initialize with specified project name. If not specified, a prompt will "
"request it"
msgstr "用指定的 Project 名称初始化。若不指定，将有提示请求获取"

#: pkg/cmd/apply/apply.go:15
#, fuzzy
msgid ""
"\n"
"\t\tApply a series of resource changes within the stack.\n"
"\t\n"
"\t\tCreate, update or delete resources according to the operational intent "
"within a stack.\n"
"\t\tBy default, Kusion will generate an execution plan and prompt for your "
"approval before performing any actions.\n"
"\t\tYou can review the plan details and make a decision to proceed with the "
"actions or abort them."
msgstr ""
"\n"
"\t\t将一系列资源变更 apply 到当前栈中。\n"
"\n"
"\t\t在当前 Stack 中根据 KCL 文件创建、更新、删除资源。\n"
"\t\t默认情况下，在采取任何行动之前，Kusion 会生成一个执行计划，并提交给你批"
"准。\n"
"\n"
"\t\t你可以检查计划详细信息，然后决定是否应采取或中止这些操作。"

#: pkg/cmd/compile/compile.go:15
msgid "Deprecated: Use 'kusion build' to generate the Intent instead"
msgstr ""

#: pkg/cmd/deps/deps.go:53
msgid ""
"Paths to focus on to inspect. It cannot be empty and each path needs to be a "
"valid relative path from the workdir"
msgstr ""

#: pkg/cmd/preview/preview.go:71
msgid "no-style sets to RawOutput mode and disables all of styling"
msgstr "no-style 设置原始输出模式并禁用所有样式"

#: pkg/cmd/preview/preview.go:75
#, fuzzy
msgid "Specify the output format"
msgstr "指定输出文件"

#, fuzzy
#~ msgid ""
#~ "\n"
#~ "\t\t# Print the Kusion version\n"
#~ "\t\tkusion version"
#~ msgstr ""
#~ "\n"
#~ "\t\t# 打印 Kusion 版本\n"
#~ "\t\tkusion version"

#~ msgid "Print the Kusion version information for the current context"
#~ msgstr "打印当前 Kusion 的版本信息"

#~ msgid "Kusion is the platform engineering engine of KusionStack"
#~ msgstr "Kusion 是 KusionStack 的平台工程引擎"

#, fuzzy
#~ msgid ""
#~ "\n"
#~ "\t\tKusion is the platform engineering engine of KusionStack. \n"
#~ "\t\tIt delivers intentions to Kubernetes, Clouds, and On-Premise "
#~ "resources."
#~ msgstr ""
#~ "\n"
#~ "\t\tKusion 是 KusionStack 的平台工程引擎。\n"
#~ "\t\t它将运维意图交付至 Kubernetes、云服务和本地部署的资源中。"

#~ msgid "Specify the override option"
#~ msgstr "指定覆盖选项"

#~ msgid "Delete the specified resources in runtime"
#~ msgstr "删除运行时中指定的资源"

#~ msgid "Disable dumping None values"
#~ msgstr "禁用转储 None 值"

#~ msgid ""
#~ "Output format of the project information. valid values: json, yaml, tree, "
#~ "human"
#~ msgstr "project 信息的输出格式。可选值：json、yaml、tree、human"

#~ msgid "Specify the command line setting files"
#~ msgstr "指定命令行配置文件"

#~ msgid ""
#~ "Swap <from> and <to> for comparison. Note that it is invalid when <from> "
#~ "is stdin. The default is false"
#~ msgstr ""
#~ "交换 <from> 和 <to> 进行比较。注意 <from> 为标准输入时无效。默认为否"

#, fuzzy
#~ msgid ""
#~ "\n"
#~ "    Env prints Kusion environment information.\n"
#~ "\n"
#~ "    By default env prints information as a shell script (on Windows, a "
#~ "batch file). If one\n"
#~ "    or more variable names is given as arguments, env prints the value of "
#~ "each named variable\n"
#~ "    on its own line.\n"
#~ "\n"
#~ "    The --json flag prints the environment in JSON format instead of as a "
#~ "shell script.\n"
#~ "\n"
#~ "    For more about environment variables, see \"kusion env -h\"."
#~ msgstr ""
#~ "\n"
#~ "Env 打印 Kusion 环境信息。\n"
#~ "\n"
#~ "默认情况下，env 将信息打印为 shell 脚本（在 Windows，是 bat 文件）。\n"
#~ "如果一个或多个变量名作为参数给出，env 将每个变量的名和值打印在单独一行"
#~ "上。\n"
#~ "\n"
#~ "--json 标志以 JSON 格式而不是 shell 脚本打印环境变量。\n"
#~ "\n"
#~ "有关环境变量的更多信息，请参阅 `kusion env -h`。"

#~ msgid "Check if KCL configurations in current directory ok to compile"
#~ msgstr "检查当前目录中的 KCL 配置是否可以编译"

#~ msgid ""
#~ "\n"
#~ "\t\tCheck if KCL configurations in current directory ok to compile."
#~ msgstr ""
#~ "\n"
#~ "\t\t检查当前目录中的 KCL 配置是否可以编译。"

#~ msgid "Print Kusion environment information"
#~ msgstr "打印 Kusion 环境信息"

#~ msgid "Specify the output file"
#~ msgstr "指定输出文件"

#~ msgid "Disable the output style and color"
#~ msgstr "禁用输出的样式与颜色"

#~ msgid ""
#~ "\n"
#~ "\t\t# Print Kusion environment information\n"
#~ "\t\tkusion env\n"
#~ "\n"
#~ "\t\t# Print Kusion environment information as JSON format\n"
#~ "\t\tkusion env --json"
#~ msgstr ""
#~ "\n"
#~ "\t\t# 打印 Kusion 环境信息\n"
#~ "\t\tkusion env\n"
#~ "\n"
#~ "\t\t# 以 JSON 格式打印 Kusion 环境信息\n"
#~ "\t\tkusion env --json"

#, fuzzy
#~ msgid ""
#~ "\n"
#~ "\t\n"
#~ "\t\t# Compile main.k with arguments\n"
#~ "\t\tkusion compile -D name=test -D age=18\n"
#~ "\t\n"
#~ "\t\t# Compile main.k with arguments from settings.yaml\n"
#~ "\t\tkusion compile -Y settings.yaml\n"
#~ "\t\n"
#~ "\t\t# Compile main.k with work directory\n"
#~ "\t\tkusion compile -w appops/demo/dev\n"
#~ "\t\n"
#~ "\t\t# Compile with override\n"
#~ "\t\tkusion compile -O __main__:appConfiguration.image=nginx:latest -a\n"
#~ "\t\n"
#~ "\t\t# Compile main.k and write result into output.yaml\n"
#~ "\t\tkusion compile -o output.yaml\n"
#~ "\t\t\n"
#~ "\t\t# Compile without output style and color\n"
#~ "\t\tkusion compile --no-style=true"
#~ msgstr ""
#~ "\n"
#~ "\t\t# 将 main.k 中的配置编译成 YAML 格式\n"
#~ "\t\tkusion compile main.k\n"
#~ "\n"
#~ "\t\t# 使用参数编译 main.k\n"
#~ "\t\tkusion compile main.k -D name=test -D age=18\n"
#~ "\n"
#~ "\t\t# 使用来自 settings.yaml 的参数编译 main.k\n"
#~ "\t\tkusion compile main.k -Y settings.yaml\n"
#~ "\n"
#~ "\t\t# 使用工作目录编译 main.k\n"
#~ "\t\tkusion compile main.k -w appops/demo/dev\n"
#~ "\n"
#~ "\t\t# Override 当前 Stack 中的 KCL 配置\n"
#~ "\t\tkusion compile -O __main__:appConfiguration.image=nginx:latest -a\n"
#~ "\n"
#~ "\t\t# 编译 main.k 并将结果写入 output.yaml\n"
#~ "\t\tkusion compile main.k -o output.yaml\n"
#~ "\t\t\n"
#~ "\t\t# 编译输出不带样式和颜色\n"
#~ "\t\tkusion compile —no-style=true"

#~ msgid "Compare differences between input files <from> and <to>"
#~ msgstr "比较输入文件 <from> 和 <to> 之间的差异"

#~ msgid "Specify the configuration override path and value"
#~ msgstr "指定配置覆盖路径和值"

#~ msgid "Max display depth of the project and stack tree. One of 0,1,2"
#~ msgstr "Project 和 Stack 树的最大显示深度。可选值：0、1、2"

#, fuzzy
#~ msgid ""
#~ "\n"
#~ "\t\tCompile Kusion modules in a Stack to the Spec (intent)\n"
#~ "\t\n"
#~ "\t\tThe command must be executed in a Stack or specifying a Stack dir "
#~ "with the -w flag. \n"
#~ "\t\tYou can specify a list of arguments to replace the placeholders "
#~ "defined in KCL,\n"
#~ "\t\tand output the compiled results to a file when using --output flag."
#~ msgstr ""
#~ "\n"
#~ "\t\t编译一个或多个 KCL 文件。\n"
#~ "\n"
#~ "\t\t必须指定 KCL 文件名。\n"
#~ "\t\t你可以指定参数列表来替换 KCL 中定义的占位符，\n"
#~ "\t\t并在使用 --output 标志时将编译结果输出到文件。"

#~ msgid "Ignore order changes in lists. The default is false"
#~ msgstr "忽略列表中的顺序变化，默认为否"

#~ msgid ""
#~ "Sort from and to by kubernetes resource order(non standard behavior). The "
#~ "default is false"
#~ msgstr "按 kubernetes 资源顺序排序（非标准行为）。默认为否"

#~ msgid ""
#~ "\n"
#~ "\t\t# Check configuration in main.k\n"
#~ "\t\tkusion check main.k\n"
#~ "\n"
#~ "\t\t# Check main.k with arguments\n"
#~ "\t\tkusion check main.k -D name=test -D age=18\n"
#~ "\n"
#~ "\t\t# Check main.k with arguments from settings.yaml\n"
#~ "\t\tkusion check main.k -Y settings.yaml\n"
#~ "\n"
#~ "\t\t# Check main.k with work directory\n"
#~ "\t\tkusion check main.k -w appops/demo/dev"
#~ msgstr ""
#~ "\n"
#~ "\t\t# 验证 main.k 中的配置\n"
#~ "\t\tkusion check main.k\n"
#~ "\n"
#~ "\t\t# 使用参数验证 main.k\n"
#~ "\t\tkusion check main.k -D name=test -D age=18\n"
#~ "\n"
#~ "\t\t# 使用来自 settings.yaml 的参数验证 main.k\n"
#~ "\t\tkusion check main.k -Y settings.yaml\n"
#~ "\n"
#~ "\t\t# 使用工作目录验证 main.k\n"
#~ "\t\tkusion check main.k -w appops/demo/dev"

#~ msgid "Specify the top-level argument"
#~ msgstr "指定顶级参数"

#~ msgid ""
#~ "\n"
#~ "\t\t# The comparison object comes from the files\n"
#~ "\t\tkusion diff pod-1.yaml pod-2.yaml\n"
#~ "\t\tkusion diff pod-1.yaml pod-2.yaml --swap=true\n"
#~ "\n"
#~ "\t\t# The comparison object comes from the stdin\n"
#~ "\t\tcat pod-1.yaml > pod-full.yaml\n"
#~ "\t\techo '---' >> pod-full.yaml\n"
#~ "\t\tcat pod-2.yaml >> pod-full.yaml\n"
#~ "\t\tcat pod-full.yaml | kusion diff -"
#~ msgstr ""
#~ "\n"
#~ "\t\t# 比较对象来自文件\n"
#~ "\t\tkusion diff pod-1.yaml pod-2.yaml\n"
#~ "\t\tkusion diff pod-1.yaml pod-2.yaml --swap=true\n"
#~ "\n"
#~ "\t\t# 比较对象来自标准输入\n"
#~ "\t\tcat pod-1.yaml > pod-full.yaml\n"
#~ "\t\techo '---' >> pod-full.yaml\n"
#~ "\t\tcat pod-2.yaml >> pod-full.yaml\n"
#~ "\t\tcat pod-full.yaml | kusion diff -"

#, fuzzy
#~ msgid "Print the environment in JSON format"
#~ msgstr "以 JSON 格式打印环境信息"

#~ msgid ""
#~ "\n"
#~ "\t\tCompare files differences and display the delta.\n"
#~ "\t\tSupport input file types are: YAML (http://yaml.org/) and JSON "
#~ "(http://json.org/)."
#~ msgstr ""
#~ "\n"
#~ "\t\t比较文件差异并显示增量。\n"
#~ "\t\t支持的文件类型有: YAML (http://yaml.org/) 和 JSON (http://json.org/)。"

#~ msgid "Omit the dyff summary header. The default is false"
#~ msgstr "省略 dyff 摘要标题，默认为否"

#~ msgid ""
#~ "\n"
#~ "\t\t# List all project and stack information in the current directory\n"
#~ "\t\tkusion ls\n"
#~ "\n"
#~ "\t\t# List all project and stack information in the specify directory\n"
#~ "\t\tkusion ls ./path/to/project_dir\n"
#~ "\n"
#~ "\t\t# List all project and stack information in the specify directory,\n"
#~ "\t\t# and output in a Tree format\n"
#~ "\t\tkusion ls ./path/to/project_dir --format=tree\n"
#~ "\n"
#~ "\t\t# List all project and stack information in the specify directory,\n"
#~ "\t\t# and output in a JSON format\n"
#~ "\t\tkusion ls ./path/to/project_dir --format=json\n"
#~ "\n"
#~ "\t\t# List all project and stack information in the specify directory,\n"
#~ "\t\t# and output in a YAML format\n"
#~ "\t\tkusion ls ./path/to/project_dir --format=yaml\n"
#~ "\n"
#~ "\t\t# List all project and stack by level, and output in a Tree format\n"
#~ "\t\tkusion ls ./path/to/project_dir --format=tree --level=1"
#~ msgstr ""
#~ "\n"
#~ "\t\t# 列出当前目录下的所有 Project 和 Stack 信息\n"
#~ "\t\tkusion ls\n"
#~ "\n"
#~ "\t\t# 列出指定目录中的所有 Project 和 Stack 信息\n"
#~ "\t\tkusion ls ./path/to/project_dir\n"
#~ "\n"
#~ "\t\t# 列出指定目录下的所有 Project 和 Stack 信息，并以 Tree 格式输出\n"
#~ "\t\tkusion ls ./path/to/project_dir --format=tree\n"
#~ "\n"
#~ "\t\t# 列出指定目录下的所有 Project 和 Stack 信息，并以 JSON 格式输出\n"
#~ "\t\tkusion ls ./path/to/project_dir --format=json\n"
#~ "\n"
#~ "\t\t# 列出指定目录下的所有 Project 和 Stack 信息，并以 YAML 格式输出\n"
#~ "\t\tkusion ls ./path/to/project_dir --format=yaml\n"
#~ "\n"
#~ "\t\t# 逐级列出所有 Project 和 Stack，并以 Tree 格式输出\n"
#~ "\t\tkusion ls ./path/to/project_dir --format=tree --level=1"

#~ msgid "Specify the work directory"
#~ msgstr "指定工作目录"

#~ msgid ""
#~ "\n"
#~ "\t\tList all project and stack information in the current directory or "
#~ "the\n"
#~ "\t\tspecify directory.\n"
#~ "\t\tThe default output is in a human friendly format, and it also "
#~ "supports\n"
#~ "\t\ta variety of formatted structure output."
#~ msgstr ""
#~ "\n"
#~ "\t\t列出当前目录或指定目录中的所有 Project 和 Stack 信息。\n"
#~ "\t\t默认输出是人性化的格式，也支持多种格式的结构输出。"

#, fuzzy
#~ msgid "Diff mode. One of noemal and . The default is normal ignore-added"
#~ msgstr "差异模式。normal 和 ignore-added 之一。默认值 normal"

#~ msgid "Specify the output style. One of human and raw. The default is human"
#~ msgstr "指定输出风格，human 和 raw 之一，默认值 human"

#, fuzzy
#~ msgid "List all Projects and Stacks"
#~ msgstr "列出所有 Project 和 Stack 信息"

#~ msgid "Compile KCL into YAML"
#~ msgstr "将 KCL 编译成 YAML"

#, fuzzy
#~ msgid "Check if KCL configurations in current directory ok to compile."
#~ msgstr "检查当前目录中的 KCL 配置是否可以编译"

#~ msgid "Specify the spec file as input"
#~ msgstr "指定 spec 文件作为输入"

#~ msgid "Print the kusion version info"
#~ msgstr "打印 Kusion 的版本信息"

#, fuzzy
#~ msgid "Print version info as JSON"
#~ msgstr "将版本信息打印成 JSON 格式"

#, fuzzy
#~ msgid "Print version info as YAML"
#~ msgstr "将版本信息打印成 YAML 格式"

#, fuzzy
#~ msgid "Print version info as versionShort string"
#~ msgstr "将版本信息打印成短版本字符串"

#~ msgid ""
#~ "\n"
#~ "\t\tThe Kusion command line tool is the entry point for users to use "
#~ "KusionStack. \n"
#~ "\t\tUsers can use the Kusion command line tool to complete all operation "
#~ "tasks.\n"
#~ "\t\t"
#~ msgstr ""
#~ "\n"
#~ "\t\tKusion 命令行工具是用户使用 KusionStack 的入口。 \n"
#~ "\t\t用户可以使用 Kusion 命令行工具完成所有的运维操作。\n"
#~ "\t\t"

#~ msgid "Destroy a configuration stack to resource(s) by work directory"
#~ msgstr "通过工作目录销毁已应用到资源的配置栈"

#~ msgid "Apply a configuration stack to resource(s) by work directory"
#~ msgstr "通过工作目录将配置栈应用到一个或多个资源"

#~ msgid "Kusion manages the Kubernetes cluster by code"
#~ msgstr "kusion 通过代码管理 Kubernetes 集群"

#, fuzzy
#~ msgid ""
#~ "\n"
#~ "\t\tKusion is a cloud-native programmable technology stack, which manages "
#~ "the Kubernetes cluster by code."
#~ msgstr "kusion 作为云原生可编程技术栈，通过代码管理 kubernetes 集群。"

#, fuzzy
#~ msgid ""
#~ "\n"
#~ "\t\tKusion init command helps you to generate a scaffolding KCL project.\n"
#~ "\t\tTry \"kusion init\" to simply get a demo project."
#~ msgstr ""
#~ "\n"
#~ "\t\tkusion init 命令可帮助你生成 KCL 脚手架项目。\n"
#~ "\t\t尝试 \"kusion init\" 获取一个简单的演示项目。"

#~ msgid "Use locally cached templates without making any network requests"
#~ msgstr "使用本地缓存模板而不发出任何网络请求"

#~ msgid ""
#~ "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|"
#~ "block|mutex)"
#~ msgstr ""
#~ "要捕获的档案名称。none、cpu、heap、goroutine、threadcreate、block 和 "
#~ "mutex 之一"

#~ msgid "Filename to write the profile"
#~ msgstr "档案写入的文件名"

#~ msgid ""
#~ "Set kusion develop log level, default is INFO, all options: DEBUG, INFO, "
#~ "ERROR, WARN, FATAL"
#~ msgstr ""
#~ "设置 kusion 开发日志级别，默认为 INFO，所有选项：DEBUG、INFO、ERROR、"
#~ "WARN、FATAL"

#~ msgid "Specify the arguments to apply KCL"
#~ msgstr "指定参数应用 KCL 代码"

#~ msgid "Specify the arguments for compile KCL"
#~ msgstr "指定编译 KCL 的参数"

#~ msgid "Specify the arguments to preview KCL"
#~ msgstr "指定参数以预览 KCL"
