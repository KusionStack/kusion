# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: gettext-go-examples-hello\n"
"Report-Msgid-Bugs-To: EMAIL\n"
"POT-Creation-Date: 2021-01-01 20:15+0800\n"
"PO-Revision-Date: 2022-11-22 16:48+0800\n"
"Last-Translator: howieyuen <howieyuen@outlook.com>\n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2\n"

#: pkg/kusionctl/cmd/cmd.go:42
msgid "kusion manages the Kubernetes cluster by code"
msgstr "kusion 通过代码管理 Kubernetes 集群"

#: pkg/kusionctl/cmd/cmd.go:43
msgid "kusion is a cloud-native programmable technology stack, which manages the Kubernetes cluster by code."
msgstr "kusion 作为云原生可编程技术栈，通过代码管理 kubernetes 集群。"

#: pkg/kusionctl/cmd/profilling.go:21
msgid "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)"
msgstr "要捕获的档案名称。none、cpu、heap、goroutine、threadcreate、block 和 mutex 之一"

#: pkg/kusionctl/cmd/profilling.go:23
msgid "Filename to write the profile"
msgstr "档案写入的文件名"

#: pkg/kusionctl/cmd/profilling.go:25
msgid "Set kusion develop log level, default is INFO, all options: DEBUG, INFO, ERROR, WARN, FATAL"
msgstr "设置 kusion 开发日志级别，默认为 INFO，所有选项：DEBUG、INFO、ERROR、WARN、FATAL"

#: pkg/kusionctl/cmd/apply/apply.go:12
msgid "Apply a configuration stack to resource(s) by work directory"
msgstr "通过工作目录将配置栈应用到一个或多个资源"

#: pkg/kusionctl/cmd/apply/apply.go:14
msgid ""
"\n"
"\t\tApply a series of resource changes within the stack.\n"
"\n"
"\t\tCreate or update or delete resources according to the KCL files within a stack.\n"
"\t\tBy default, Kusion will generate an execution plan and present it for your approval before taking any action.\n"
"\n"
"\t\tYou can check the plan details and then decide if the actions should be taken or aborted."
msgstr ""
"\n"
"\t\t将一系列资源变更应用到当前栈中。\n"
"\n"
"\t\t在当前 Stack 中根据 KCL 文件创建、更新、删除资源。\n"
"\t\t默认情况下，在采取任何行动之前，kusion会生成一个执行计划，并提交给你批准。\n"
"\n"
"\t\t你可以检查计划详细信息，然后决定是否应采取或中止这些操作。"

#: pkg/kusionctl/cmd/apply/apply.go:22
msgid ""
"\n"
"\t\t# Apply with specifying work directory\n"
"\t\tkusion apply -w /path/to/workdir\n"
"\n"
"\t\t# Apply with specifying arguments\n"
"\t\tkusion apply -D name=test -D age=18\n"
"\n"
"\t\t# Apply with specifying setting file\n"
"\t\tkusion apply -Y settings.yaml\n"
"\n"
"\t\t# Skip interactive approval of plan details before applying\n"
"\t\tkusion apply --yes"
msgstr ""
"\n"
"\t\t# 指定工作目录应用\n"
"\t\tkusion apply -w /path/to/workdir\n"
"\n"
"\t\t# 指定参数应用\n"
"\t\tkusion apply -D name=test -D age=18\n"
"\n"
"\t\t# 指定配置文件应用\n"
"\t\tkusion apply -Y settings.yaml\n"
"\n"
"\t\t# 应用前跳过计划的交互式审批\n"
"\t\tkusion apply —yes"

#: pkg/kusionctl/cmd/apply/apply.go:54 pkg/kusionctl/cmd/compile/compile.go:63
#: pkg/kusionctl/cmd/destroy/destroy.go:151 pkg/kusionctl/cmd/check/check.go:57
msgid "Specify the work directory"
msgstr "指定工作目录"

#: pkg/kusionctl/cmd/apply/apply.go:56 pkg/kusionctl/cmd/destroy/destroy.go:153
msgid "Specify the operator"
msgstr "指定操作人"

#: pkg/kusionctl/cmd/apply/apply.go:58
msgid "Specify the arguments to apply KCL"
msgstr "指定参数应用 KCL 代码"

#: pkg/kusionctl/cmd/apply/apply.go:60 pkg/kusionctl/cmd/compile/compile.go:59
#: pkg/kusionctl/cmd/destroy/destroy.go:157 pkg/kusionctl/cmd/check/check.go:55
msgid "Specify the command line setting files"
msgstr "指定命令行配置文件"

#: pkg/kusionctl/cmd/apply/apply.go:62
msgid "Specify the configuration override path and value"
msgstr "指定配置覆盖路径和值"

#: pkg/kusionctl/cmd/apply/apply.go:64
msgid "Automatically approve and perform the update after previewing it"
msgstr "预览后自动审批并应用更新"

#: pkg/kusionctl/cmd/apply/apply.go:66
msgid "Automatically show plan details after previewing it"
msgstr "预览后自动展示 apply 计划细节"

#: pkg/kusionctl/cmd/apply/apply.go:68 pkg/kusionctl/cmd/preview/preview.go:61
msgid "no-style sets to RawOutput mode and disables all of styling"
msgstr "no-style 设置原始输出模式并禁用所有样式"

#: pkg/kusionctl/cmd/apply/apply.go:70
msgid "dry-run to preview the execution effect (always successful) without actually applying the changes"
msgstr "dry-run 预览执行效果（总是成功）而不实际应用更改"

#: pkg/kusionctl/cmd/check/check.go:13
msgid "Check if KCL configurations in current directory ok to compile"
msgstr "检查当前目录中的 KCL 配置是否可以编译"

#: pkg/kusionctl/cmd/check/check.go:15
msgid ""
"\n"
"\t\tCheck if KCL configurations in current directory ok to compile."
msgstr ""
"\n"
"\t\t检查当前目录中的 KCL 配置是否可以编译。"

#: pkg/kusionctl/cmd/check/check.go:18
msgid ""
"\n"
"\t\t# Check configuration in main.k\n"
"\t\tkusion check main.k\n"
"\n"
"\t\t# Check main.k with arguments\n"
"\t\tkusion check main.k -D name=test -D age=18\n"
"\n"
"\t\t# Check main.k with arguments from settings.yaml\n"
"\t\tkusion check main.k -Y settings.yaml\n"
"\n"
"\t\t# Check main.k with work directory\n"
"\t\tkusion check main.k -w appops/demo/dev"
msgstr ""
"\n"
"\t\t# 验证 main.k 中的配置\n"
"\t\tkusion check main.k\n"
"\n"
"\t\t# 使用参数验证 main.k\n"
"\t\tkusion check main.k -D name=test -D age=18\n"
"\n"
"\t\t# 使用来自 settings.yaml 的参数验证 main.k\n"
"\t\tkusion check main.k -Y settings.yaml\n"
"\n"
"\t\t# 使用工作目录验证 main.k\n"
"\t\tkusion check main.k -w appops/demo/dev"

#: pkg/kusionctl/cmd/check/check.go:59 pkg/kusionctl/cmd/compile/compile.go:65
msgid "Disable dumping None values"
msgstr "禁用转储 None 值"

#: pkg/kusionctl/cmd/compile/compile.go:12
msgid "Compile KCL into YAML"
msgstr "将 KCL 编译成 YAML"

#: pkg/kusionctl/cmd/compile/compile.go:14
msgid ""
"\n"
"\t\tCompile one or more KCL files.\n"
"\n"
"\t\tThe KCL filename must be specified.\n"
"\t\tYou can specify a list of arguments to replace the placeholders defined in KCL,\n"
"\t\tand output the compiled results to a file when using --output flag."
msgstr ""
"\n"
"\t\t编译一个或多个 KCL 文件。\n"
"\n"
"\t\t必须指定 KCL 文件名。\n"
"\t\t你可以指定参数列表来替换 KCL 中定义的占位符，\n"
"\t\t并在使用 --output 标志时将编译结果输出到文件。"

#: pkg/kusionctl/cmd/compile/compile.go:22
msgid ""
"\n"
"\t\t# Compile configuration in main.k into YAML format\n"
"\t\tkusion compile main.k\n"
"\n"
"\t\t# Compile main.k with arguments\n"
"\t\tkusion compile main.k -D name=test -D age=18\n"
"\n"
"\t\t# Compile main.k with arguments from settings.yaml\n"
"\t\tkusion compile main.k -Y settings.yaml\n"
"\n"
"\t\t# Compile main.k with work directory\n"
"\t\tkusion compile main.k -w appops/demo/dev\n"
"\n"
"\t\t# Compile with override\n"
"\t\tkusion compile -O __main__:appConfiguration.image=nginx:latest -a\n"
"\n"
"\t\t# Compile main.k and write result into output.yaml\n"
"\t\tkusion compile main.k -o output.yaml"
msgstr ""
"\n"
"\t\t# 将 main.k 中的配置编译成 YAML 格式\n"
"\t\tkusion compile main.k\n"
"\n"
"\t\t# 使用参数编译 main.k\n"
"\t\tkusion compile main.k -D name=test -D age=18\n"
"\n"
"\t\t# 使用来自 settings.yaml 的参数编译 main.k\n"
"\t\tkusion compile main.k -Y settings.yaml\n"
"\n"
"\t\t# 使用工作目录编译 main.k\n"
"\t\tkusion compile main.k -w appops/demo/dev\n"
"\n"
"\t\t# Override 当前 Stack 中的 KCL 配置\n"
"\t\tkusion compile -O __main__:appConfiguration.image=nginx:latest -a\n"
"\n"
"\t\t# 编译 main.k 并将结果写入 output.yaml\n"
"\t\tkusion compile main.k -o output.yaml"

#: pkg/kusionctl/cmd/compile/compile.go:57 pkg/kusionctl/cmd/check/check.go:53
msgid "Specify the top-level argument"
msgstr "指定顶级参数"

#: pkg/kusionctl/cmd/compile/compile.go:61
msgid "Specify the output file"
msgstr "指定输出文件"

#: pkg/kusionctl/cmd/compile/compile.go:67 pkg/kusionctl/cmd/check/check.go:61
msgid "Specify the override option"
msgstr "指定覆盖选项"

#: pkg/kusionctl/cmd/destroy/destroy.go:56
msgid "Destroy a configuration stack to resource(s) by work directory"
msgstr "通过工作目录销毁已应用到资源的配置栈"

#: pkg/kusionctl/cmd/destroy/destroy.go:58
msgid ""
"\n"
"\t\tDelete resources by resource spec.\n"
"\n"
"\t\tOnly KCL files are accepted. Only one type of arguments may be specified: filenames,\n"
"\t\tresources and names, or resources and label selector.\n"
"\n"
"\t\tNote that the destroy command does NOT do resource version checks, so if someone submits an\n"
"\t\tupdate to a resource right when you submit a destroy, their update will be lost along with the\n"
"\t\trest of the resource."
msgstr ""
"\n"
"\t\t通过资源规约删除资源。\n"
"\n"
"\t\t只接受 KCL 文件。只能指定一种类型的参数：文件名、资源、名称、资源或标签选择器。\n"
"\n"
"\t\t请注意，destroy 命令不会进行资源版本检查，\n"
"\t\t因此如果有人在你提交销毁时提交了对资源的更新，\n"
"\t\t他们的更新将与资源一起丢失。"

#: pkg/kusionctl/cmd/destroy/destroy.go:68
msgid ""
"\n"
"\t\t# Delete the configuration in pod.k\n"
"\t\tkusion destroy -f ./pod.k"
msgstr ""
"\n"
"\t\t# 删除 pod.k 中的配置\n"
"\t\tkusion destroy -f ./pod.k"

#: pkg/kusionctl/cmd/destroy/destroy.go:155
msgid "Specify the arguments for compile KCL"
msgstr "指定编译 KCL 的参数"

#: pkg/kusionctl/cmd/diff/diff.go:30
msgid "Compare differences between input files <from> and <to>"
msgstr "比较输入文件 <from> 和 <to> 之间的差异"

#: pkg/kusionctl/cmd/diff/diff.go:32
msgid ""
"\n"
"\t\tCompare files differences and display the delta.\n"
"\t\tSupport input file types are: YAML (http://yaml.org/) and JSON (http://json.org/)."
msgstr ""
"\n"
"\t\t比较文件差异并显示增量。\n"
"\t\t支持的文件类型有: YAML (http://yaml.org/) 和 JSON (http://json.org/)。"

#: pkg/kusionctl/cmd/diff/diff.go:36
msgid ""
"\n"
"\t\t# The comparison object comes from the files\n"
"\t\tkusion diff pod-1.yaml pod-2.yaml\n"
"\t\tkusion diff pod-1.yaml pod-2.yaml --swap=true\n"
"\n"
"\t\t# The comparison object comes from the stdin\n"
"\t\tcat pod-1.yaml > pod-full.yaml\n"
"\t\techo '---' >> pod-full.yaml\n"
"\t\tcat pod-2.yaml >> pod-full.yaml\n"
"\t\tcat pod-full.yaml | kusion diff -"
msgstr ""
"\n"
"\t\t# 比较对象来自文件\n"
"\t\tkusion diff pod-1.yaml pod-2.yaml\n"
"\t\tkusion diff pod-1.yaml pod-2.yaml --swap=true\n"
"\n"
"\t\t# 比较对象来自标准输入\n"
"\t\tcat pod-1.yaml > pod-full.yaml\n"
"\t\techo '---' >> pod-full.yaml\n"
"\t\tcat pod-2.yaml >> pod-full.yaml\n"
"\t\tcat pod-full.yaml | kusion diff -"

#: pkg/kusionctl/cmd/diff/diff.go:77
msgid "Swap <from> and <to> for comparison. Note that it is invalid when <from> is stdin. The default is false"
msgstr "交换 <from> 和 <to> 进行比较。注意 <from> 为标准输入时无效。默认为否"

#: pkg/kusionctl/cmd/diff/diff.go:79
msgid "Diff mode. One of normal and ignore-added. The default is normal"
msgstr "差异模式。normal 和 ignore-added 之一。默认值 normal"

#: pkg/kusionctl/cmd/diff/diff.go:81
msgid "Specify the output style. One of human and raw. The default is human"
msgstr "指定输出风格，human 和 raw 之一，默认值 human"

#: pkg/kusionctl/cmd/diff/diff.go:83
msgid "Ignore order changes in lists. The default is false"
msgstr "忽略列表中的顺序变化，默认为否"

#: pkg/kusionctl/cmd/diff/diff.go:85
msgid "Omit the dyff summary header. The default is false"
msgstr "省略 dyff 摘要标题，默认为否"

#: pkg/kusionctl/cmd/diff/diff.go:87
msgid "Sort from and to by kubernetes resource order(non standard behavior). The default is false"
msgstr "按 kubernetes 资源顺序排序（非标准行为）。默认为否"

#: pkg/kusionctl/cmd/env/env.go:12
msgid "Print Kusion environment information"
msgstr "打印 Kusion 环境信息"

#: pkg/kusionctl/cmd/env/env.go:14
msgid ""
"\n"
"Env prints Kusion environment information.\n"
"\n"
"By default env prints information as a shell script\n"
"(on Windows, a batch file). If one or more variable\n"
"names is given as arguments, env prints the value of\n"
"each named variable on its own line.\n"
"\n"
"The --json flag prints the environment in JSON format\n"
"instead of as a shell script.\n"
"\n"
"For more about environment variables, see 'kusion env -h'."
msgstr ""
"\n"
"Env 打印 Kusion 环境信息。\n"
"\n"
"默认情况下，env 将信息打印为 shell 脚本（在 Windows，是 bat 文件）。\n"
"如果一个或多个变量名作为参数给出，env 将每个变量的名和值打印在单独一行上。\n"
"\n"
"--json 标志以 JSON 格式而不是 shell 脚本打印环境变量。\n"
"\n"
"有关环境变量的更多信息，请参阅 `kusion env -h`。"

#: pkg/kusionctl/cmd/env/env.go:27
msgid ""
"\n"
"\t\t# Print Kusion environment information\n"
"\t\tkusion env\n"
"\n"
"\t\t# Print Kusion environment information as JSON format\n"
"\t\tkusion env --json"
msgstr ""
"\n"
"\t\t# 打印 Kusion 环境信息\n"
"\t\tkusion env\n"
"\n"
"\t\t# 以 JSON 格式打印 Kusion 环境信息\n"
"\t\tkusion env --json"

#: pkg/kusionctl/cmd/env/env.go:54
msgid "print the environment in JSON format"
msgstr "以 JSON 格式打印环境信息"

#: pkg/kusionctl/cmd/init/init.go:25
msgid "Initialize KCL file structure and base codes for a new project"
msgstr "初始化一个新项目，包含 KCL 文件结构和基础代码"

#: pkg/kusionctl/cmd/init/init.go:27
msgid ""
"\n"
"\t\tkusion init command helps you to generate an scaffolding KCL project.\n"
"\t\tTry \"kusion init\" to simply get a demo project."
msgstr ""
"\n"
"\t\tkusion init 命令可帮助你生成 KCL 脚手架项目。\n"
"\t\t尝试 \"kusion init\" 获取一个简单的演示项目。"

#: pkg/kusionctl/cmd/init/init.go:31
msgid ""
"\n"
"\t\t# Initialize a new KCL project from internal templates\n"
"\t\tkusion init\n"
"\n"
"\t\t# Initialize a new KCL project from external default templates location\n"
"\t\tkusion init --online=true\n"
"\n"
"\t\t# Initialize a new KCL project from specific templates location\n"
"\t\tkusion init https://github.com/<user>/<repo> --online=true\n"
"\n"
"\t\t# Initialize a new KCL project from local directory\n"
"\t\tkusion init /path/to/templates"
msgstr ""
"\n"
"\t\t# 从内部模板初始化新的 KCL 项目\n"
"\t\tkusion init\n"
"\n"
"\t\t# 从外部默认模板仓库初始化新的 KCL 项目\n"
"\t\tkusion init --online=true\n"
"\n"
"\t\t# 从指定模板仓库初始化新的 KCL 项目\n"
"\t\tkusion init https://github.com/<user>/<repo> --online=true\n"
"\n"
"\t\t# 从本地目录初始化新的 KCL 项目\n"
"\t\tkusion init /path/to/templates"

#: pkg/kusionctl/cmd/init/init.go:51
msgid "The project name; if not specified, a prompt will request it"
msgstr "项目名称；若未指定，提示将要求该值"

#: pkg/kusionctl/cmd/init/init.go:54
msgid "Forces content to be generated even if it would change existing files"
msgstr "强制生成内容，即使它会更改现有文件"

#: pkg/kusionctl/cmd/init/init.go:57
msgid "Use locally cached templates without making any network requests"
msgstr "使用本地缓存模板而不发出任何网络请求"

#: pkg/kusionctl/cmd/init/init.go:60
msgid "Skip prompts and proceed with default values"
msgstr "跳过提示并继续使用默认值"

#: pkg/kusionctl/cmd/ls/ls.go:12
msgid "List all project and stack information"
msgstr "列出所有项目和堆栈信息"

#: pkg/kusionctl/cmd/ls/ls.go:14
msgid ""
"\n"
"\t\tList all project and stack information in the current directory or the\n"
"\t\tspecify directory.\n"
"\t\tThe default output is in a human friendly format, and it also supports\n"
"\t\ta variety of formatted structure output."
msgstr ""
"\n"
"\t\t列出当前目录或指定目录中的所有项目和堆栈信息。\n"
"\t\t默认输出是人性化的格式，也支持多种格式的结构输出。"

#: pkg/kusionctl/cmd/ls/ls.go:20
msgid ""
"\n"
"\t\t# List all project and stack information in the current directory\n"
"\t\tkusion ls\n"
"\n"
"\t\t# List all project and stack information in the specify directory\n"
"\t\tkusion ls ./path/to/project_dir\n"
"\n"
"\t\t# List all project and stack information in the specify directory,\n"
"\t\t# and output in a Tree format\n"
"\t\tkusion ls ./path/to/project_dir --format=tree\n"
"\n"
"\t\t# List all project and stack information in the specify directory,\n"
"\t\t# and output in a JSON format\n"
"\t\tkusion ls ./path/to/project_dir --format=json\n"
"\n"
"\t\t# List all project and stack information in the specify directory,\n"
"\t\t# and output in a YAML format\n"
"\t\tkusion ls ./path/to/project_dir --format=yaml\n"
"\n"
"\t\t# List all project and stack by level, and output in a Tree format\n"
"\t\tkusion ls ./path/to/project_dir --format=tree --level=1"
msgstr ""
"\n"
"\t\t# 列出当前目录下的所有项目和堆栈信息\n"
"\t\tkusion ls\n"
"\n"
"\t\t# 列出指定目录中的所有项目和堆栈信息\n"
"\t\tkusion ls ./path/to/project_dir\n"
"\n"
"\t\t# 列出指定目录下的所有项目和堆栈信息，并以 Tree 格式输出\n"
"\t\tkusion ls ./path/to/project_dir --format=tree\n"
"\n"
"\t\t# 列出指定目录下的所有项目和堆栈信息，并以 JSON 格式输出\n"
"\t\tkusion ls ./path/to/project_dir --format=json\n"
"\n"
"\t\t# 列出指定目录下的所有项目和堆栈信息，并以 YAML 格式输出\n"
"\t\tkusion ls ./path/to/project_dir --format=yaml\n"
"\n"
"\t\t# 逐级列出所有项目和堆栈，并以 Tree 格式输出\n"
"\t\tkusion ls ./path/to/project_dir --format=tree --level=1"

#: pkg/kusionctl/cmd/ls/ls.go:62
msgid "the output format of the project information. valid values: json, yaml, tree, human"
msgstr "项目信息的输出格式。可选值：json、yaml、tree、human"

#: pkg/kusionctl/cmd/ls/ls.go:64
msgid "max display depth of the project and stack tree. One of 0,1,2"
msgstr "项目和堆栈树的最大显示深度。可选值：0、1、2"

#: pkg/kusionctl/cmd/preview/preview.go:12
msgid "Preview a series of resource changes within the stack"
msgstr "预览堆栈中的一系列资源更改"

#: pkg/kusionctl/cmd/preview/preview.go:14
msgid ""
"\n"
"\t\tPreview a series of resource changes within the stack.\n"
"\n"
"\t\tCreate or update or delete resources according to the KCL files within a stack.\n"
"\t\tBy default, Kusion will generate an execution plan and present it for your approval before taking any action."
msgstr ""
"\n"
"\t\t预览堆栈中的一系列资源更改。\n"
"\n"
"\t\t根据堆栈内的 KCL 文件创建或更新或删除资源。\n"
"\t\t默认情况下，Kusion 会生成一个执行计划并在采取任何行动之前将其提交给您批准。"

#: pkg/kusionctl/cmd/preview/preview.go:20
msgid ""
"\n"
"\t\t# Preview with specifying work directory\n"
"\t\tkusion preview -w /path/to/workdir\n"
"\n"
"\t\t# Preview with specifying arguments\n"
"\t\tkusion preview -D name=test -D age=18\n"
"\n"
"\t\t# Preview with specifying setting file\n"
"\t\tkusion preview -Y settings.yaml"
msgstr ""
"\n"
"\t\t# 使用指定工作目录进行预览\n"
"\t\tkusion preview -w /path/to/workdir\n"
"\n"
"\t\t# 使用指定参数预览\n"
"\t\tkusion preview -D name=test -D age=18\n"
"\n"
"\t\t# 指定设置文件预览\n"
"\t\tkusion preview -Y settings.yaml"

#: pkg/kusionctl/cmd/preview/preview.go:51
msgid "Specify the arguments to preview KCL"
msgstr "指定参数以预览 KCL"

#: pkg/kusionctl/cmd/version/version.go:12
msgid "Print the kusion version info"
msgstr "打印 kusion 的版本信息"

#: pkg/kusionctl/cmd/version/version.go:14
msgid "Print the kusion version information for the current context."
msgstr "打印当前会话 kusion 的版本信息。"

#: pkg/kusionctl/cmd/version/version.go:16
msgid ""
"\n"
"\t\t# Print the kusion version\n"
"\t\tkusion version"
msgstr ""
"\n"
"\t\t# 打印 kusion 版本\n"
"\t\tkusion version"

#: pkg/kusionctl/cmd/version/version.go:39
msgid "print version info as JSON"
msgstr "将版本信息打印成 JSON 格式"

#: pkg/kusionctl/cmd/version/version.go:41
msgid "print version info as YAML"
msgstr "将版本信息打印成 YAML 格式"

#: pkg/kusionctl/cmd/version/version.go:43
msgid "print version info as versionShort string"
msgstr "将版本信息打印成短版本字符串"
